<div class="highlight"><pre><span class="c">/**</span>
<span class="c"> * inputEx RPC utility functions</span>
<span class="c"> * Implements SMD and create forms directly from services</span>
<span class="c"> * @class inputEx.RPC</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span> <span class="o">=</span> <span class="p">{</span>
   
   <span class="c">/**</span>
<span class="c">    * Build a form to run a service !</span>
<span class="c">    * @param {function} method A method created through inputEx.RPC.Service</span>
<span class="c">    * @param {Object} formOpts</span>
<span class="c">    */</span>
   <span class="nx">generateServiceForm</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">method</span><span class="o">,</span> <span class="nx">formOpts</span><span class="o">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
   
      <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">formOpts</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">formOpts</span><span class="p">.</span><span class="nx">fields</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
         <span class="nx">options</span> <span class="o">=</span> <span class="nx">formOpts</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="c">// create the form directly from the method params</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="nx">options</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">formForMethod</span><span class="p">(</span><span class="nx">method</span><span class="p">);</span>
      	<span class="c">// Add user options from formOpts</span>
         <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">augmentObject</span><span class="p">(</span><span class="nx">options</span><span class="o">,</span> <span class="nx">formOpts</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
      <span class="p">}</span>
   
      <span class="c">// Add buttons to launch the service</span>
      <span class="nx">options</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;form&quot;</span><span class="o">;</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">buttons</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">options</span><span class="p">.</span><span class="nx">buttons</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;submit&#39;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">method</span><span class="p">.</span><span class="nx">name</span><span class="o">,</span> <span class="nx">onClick</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
               <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">stopEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
               <span class="nx">form</span><span class="p">.</span><span class="nx">showMask</span><span class="p">();</span>
               <span class="nx">method</span><span class="p">(</span><span class="nx">form</span><span class="p">.</span><span class="nx">getValue</span><span class="p">()</span><span class="o">,</span> <span class="p">{</span>
                  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
                     <span class="nx">form</span><span class="p">.</span><span class="nx">hideMask</span><span class="p">();</span>
                     <span class="k">if</span><span class="p">(</span><span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">success</span><span class="p">))</span> <span class="p">{</span>
               		   <span class="nx">callback</span><span class="p">.</span><span class="nx">success</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="k">this</span><span class="o">,</span> <span class="nx">results</span><span class="p">);</span>
               		<span class="p">}</span>
                  <span class="p">}</span><span class="o">,</span>
                  <span class="nx">failure</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                     <span class="nx">form</span><span class="p">.</span><span class="nx">hideMask</span><span class="p">();</span>
                  <span class="p">}</span>
               <span class="p">});</span>
					<span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="c">// do NOT send the browser submit event</span>
            <span class="p">}}</span>
         <span class="p">];</span>
      <span class="p">}</span>
   
      <span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
   
      <span class="k">return</span> <span class="nx">form</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Return the inputEx form options from a method</span>
<span class="c">    * @param {function} method A method created through inputEx.RPC.Service</span>
<span class="c">    */</span>
   <span class="nx">formForMethod</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
   
      <span class="c">// convert the method parameters into a json-schema :</span>
      <span class="kd">var</span> <span class="nx">schemaIdentifierMap</span> <span class="o">=</span> <span class="p">{};</span>
      <span class="nx">schemaIdentifierMap</span><span class="p">[</span><span class="nx">method</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
          <span class="nx">id</span><span class="o">:</span> <span class="nx">method</span><span class="p">.</span><span class="nx">name</span><span class="o">,</span>
          <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;object&#39;</span><span class="o">,</span>
          <span class="nx">properties</span><span class="o">:</span><span class="p">{}</span>
      <span class="p">};</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">method</span><span class="p">.</span><span class="nx">_parameters</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">_parameters</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
         <span class="nx">schemaIdentifierMap</span><span class="p">[</span><span class="nx">method</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">properties</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">p</span><span class="o">;</span>
      <span class="p">}</span>
   
      <span class="c">// Use the builder to build an inputEx form from the json-schema</span>
      <span class="kd">var</span> <span class="nx">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">JsonSchema</span><span class="p">.</span><span class="nx">Builder</span><span class="p">({</span>
   	  <span class="s1">&#39;schemaIdentifierMap&#39;</span><span class="o">:</span> <span class="nx">schemaIdentifierMap</span><span class="o">,</span>
   	  <span class="s1">&#39;defaultOptions&#39;</span><span class="o">:</span><span class="p">{</span>
   	     <span class="s1">&#39;showMsg&#39;</span><span class="o">:</span><span class="kc">true</span>
   	  <span class="p">}</span>
      <span class="p">});</span>
   	<span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">builder</span><span class="p">.</span><span class="nx">schemaToInputEx</span><span class="p">(</span><span class="nx">schemaIdentifierMap</span><span class="p">[</span><span class="nx">method</span><span class="p">.</span><span class="nx">name</span><span class="p">]);</span>
	
   	<span class="k">return</span> <span class="nx">options</span><span class="o">;</span>
   <span class="p">}</span>
   
<span class="p">};</span>



<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   
   <span class="kd">var</span> <span class="nx">rpc</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="o">,</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">,</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * Provide SMD support </span>
<span class="c"> * http://groups.google.com/group/json-schema/web/service-mapping-description-proposal</span>
<span class="c"> * Not implemented: REST envelope, TCP/IP transport</span>
<span class="c"> * Take a string as a url to retrieve an smd or an object that is an smd or partial smd to use </span>
<span class="c"> * as a definition for the service</span>
<span class="c"> * @class inputEx.RPC.Service</span>
<span class="c"> * @constructor</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Service</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">smd</span><span class="o">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>

   <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">smd</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">smdUrl</span> <span class="o">=</span> <span class="nx">smd</span><span class="o">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">smd</span><span class="o">,</span> <span class="nx">callback</span><span class="p">);</span>
   <span class="p">}</span>
   <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">smd</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_smd</span> <span class="o">=</span> <span class="nx">smd</span><span class="o">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
   <span class="p">}</span>
   <span class="k">else</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;smd should be an object or an url&quot;</span><span class="p">);</span>
   <span class="p">}</span>
   
<span class="p">};</span>


<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
   
   <span class="c">/**</span>
<span class="c">    * Generate the function from a service definition</span>
<span class="c">    * @method _generateService</span>
<span class="c">    * @param {String} serviceName</span>
<span class="c">    * @param {Method definition} method</span>
<span class="c">    */</span>
   <span class="nx">_generateService</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">serviceName</span><span class="o">,</span> <span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">method</span><span class="p">]){</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;WARNING: &quot;</span><span class="o">+</span> <span class="nx">serviceName</span><span class="o">+</span> <span class="s2">&quot; already exists for service. Unable to generate function&quot;</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="nx">method</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">serviceName</span><span class="o">;</span>
	
		<span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
		<span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="o">,</span> <span class="nx">opts</span><span class="p">)</span> <span class="p">{</span>
		   <span class="kd">var</span> <span class="nx">envelope</span> <span class="o">=</span> <span class="nx">rpc</span><span class="p">.</span><span class="nx">Envelope</span><span class="p">[</span><span class="nx">method</span><span class="p">.</span><span class="nx">envelope</span> <span class="o">||</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">envelope</span><span class="p">];</span>
		   <span class="kd">var</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">{</span>
   	      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
               <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">envelope</span><span class="p">.</span><span class="nx">deserialize</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span>
      	      <span class="nx">opts</span><span class="p">.</span><span class="nx">success</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">opts</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="nx">self</span><span class="o">,</span> <span class="nx">results</span><span class="p">);</span>
   	      <span class="p">}</span><span class="o">,</span>
   	      <span class="nx">failure</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
   	         <span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">opts</span><span class="p">.</span><span class="nx">failure</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
						<span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">envelope</span><span class="p">.</span><span class="nx">deserialize</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span>
   	            <span class="nx">opts</span><span class="p">.</span><span class="nx">failure</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">opts</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="nx">self</span><span class="o">,</span> <span class="nx">results</span><span class="p">);</span>
   	         <span class="p">}</span>
   	      <span class="p">}</span><span class="o">,</span>
   	      <span class="nx">scope</span><span class="o">:</span> <span class="nx">self</span>
   	   <span class="p">};</span>
   	   
   	   
   	   <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{};</span>
   	   <span class="k">if</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">additionalParameters</span> <span class="o">&amp;&amp;</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">parameters</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
   	      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
   	         <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
   	         <span class="nx">params</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">p</span><span class="p">[</span><span class="s2">&quot;default&quot;</span><span class="p">];</span>
   	      <span class="p">}</span>
   	   <span class="p">}</span>
   	   <span class="nx">lang</span><span class="p">.</span><span class="nx">augmentObject</span><span class="p">(</span><span class="nx">params</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
   	   
   	   <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">target</span> <span class="o">||</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">target</span><span class="o">;</span>
   	   <span class="kd">var</span> <span class="nx">urlRegexp</span> <span class="o">=</span> <span class="sr">/^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$/i</span><span class="o">;</span>
   	   <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">url</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">urlRegexp</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">url</span> <span class="o">!=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
   	      <span class="nx">url</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">target</span><span class="o">+</span><span class="nx">url</span><span class="o">;</span>
   	   <span class="p">}</span>
   	   
	      <span class="k">if</span><span class="p">(</span> <span class="o">!!</span><span class="k">this</span><span class="p">.</span><span class="nx">smdUrl</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">url</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">urlRegexp</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
   	      <span class="c">// URL is still relative !</span>
   	      <span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">smdUrl</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
   	      <span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">;</span>
   	      <span class="nx">url</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">+</span><span class="nx">url</span><span class="o">;</span>
   	   <span class="p">}</span>
   	   
   	   
         <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">target</span><span class="o">:</span> <span class="nx">url</span><span class="o">,</span>
            <span class="nx">callback</span><span class="o">:</span> <span class="nx">callback</span><span class="o">,</span>
            <span class="nx">data</span><span class="o">:</span> <span class="nx">params</span><span class="o">,</span>
            <span class="nx">origData</span><span class="o">:</span> <span class="nx">data</span><span class="o">,</span>
            <span class="nx">opts</span><span class="o">:</span> <span class="nx">opts</span><span class="o">,</span>
            <span class="nx">callbackParamName</span><span class="o">:</span> <span class="nx">method</span><span class="p">.</span><span class="nx">callbackParamName</span> <span class="o">||</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">callbackParamName</span><span class="o">,</span>
            <span class="nx">transport</span><span class="o">:</span> <span class="nx">method</span><span class="p">.</span><span class="nx">transport</span> <span class="o">||</span> <span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">transport</span>
         <span class="p">};</span>
   	   <span class="kd">var</span> <span class="nx">serialized</span> <span class="o">=</span> <span class="nx">envelope</span><span class="p">.</span><span class="nx">serialize</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_smd</span><span class="o">,</span> <span class="nx">method</span><span class="o">,</span> <span class="nx">params</span><span class="p">);</span>
         <span class="nx">lang</span><span class="p">.</span><span class="nx">augmentObject</span><span class="p">(</span><span class="nx">r</span><span class="o">,</span> <span class="nx">serialized</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
         
   	   <span class="nx">rpc</span><span class="p">.</span><span class="nx">Transport</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">transport</span><span class="p">].</span><span class="nx">call</span><span class="p">(</span><span class="nx">self</span><span class="o">,</span> <span class="nx">r</span> <span class="p">);</span> 
		<span class="p">};</span>
		
		<span class="nx">func</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">serviceName</span><span class="o">;</span>
		<span class="nx">func</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">description</span><span class="o">;</span>
		<span class="nx">func</span><span class="p">.</span><span class="nx">_parameters</span> <span class="o">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">parameters</span><span class="o">;</span>
		
		<span class="k">return</span> <span class="nx">func</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Process the SMD definition</span>
<span class="c">    * @method process</span>
<span class="c">    */</span>
   <span class="nx">process</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="kd">var</span> <span class="nx">serviceDefs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_smd</span><span class="p">.</span><span class="nx">services</span><span class="o">;</span>
      
      <span class="c">// Generate the methods to this object</span>
		<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">serviceName</span> <span class="k">in</span> <span class="nx">serviceDefs</span><span class="p">){</span>
		   <span class="k">if</span><span class="p">(</span> <span class="nx">serviceDefs</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">serviceName</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
		      
		      <span class="c">// Get the object that will contain the method.</span>
		      <span class="c">// handles &quot;namespaced&quot; services by breaking apart by &#39;.&#39;</span>
			   <span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
			   <span class="kd">var</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">serviceName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span> 
			   <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">pieces</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
				   <span class="nx">current</span> <span class="o">=</span> <span class="nx">current</span><span class="p">[</span><span class="nx">pieces</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">current</span><span class="p">[</span><span class="nx">pieces</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{});</span>
			   <span class="p">}</span>
			   
			   <span class="nx">current</span><span class="p">[</span><span class="nx">pieces</span><span class="p">[</span><span class="nx">pieces</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span>	<span class="k">this</span><span class="p">.</span><span class="nx">_generateService</span><span class="p">(</span><span class="nx">serviceName</span><span class="o">,</span> <span class="nx">serviceDefs</span><span class="p">[</span><span class="nx">serviceName</span><span class="p">]);</span>
		   <span class="p">}</span>
		<span class="p">}</span>
		
		<span class="c">// call the success handler</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">success</span><span class="p">))</span> <span class="p">{</span>
		   <span class="nx">callback</span><span class="p">.</span><span class="nx">success</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="k">this</span><span class="p">);</span>
		<span class="p">}</span>
		
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Download the SMD at the given url</span>
<span class="c">    * @method fetch</span>
<span class="c">    * @param {String} Absolute or relative url</span>
<span class="c">    */</span>
   <span class="nx">fetch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="o">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="c">// TODO: if url is not in the same domain, we should use jsonp !</span>
      <span class="nx">util</span><span class="p">.</span><span class="nx">Connect</span><span class="p">.</span><span class="nx">asyncRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="o">,</span> <span class="nx">url</span><span class="o">,</span> <span class="p">{</span> 
         <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
               <span class="k">this</span><span class="p">.</span><span class="nx">_smd</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
               <span class="k">this</span><span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">console</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">))</span>
                  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ex</span><span class="p">);</span>
               <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">failure</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
                  <span class="nx">callback</span><span class="p">.</span><span class="nx">failure</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="k">this</span><span class="o">,</span> <span class="p">{</span><span class="nx">error</span><span class="o">:</span> <span class="nx">ex</span><span class="p">});</span>
               <span class="p">}</span>
            <span class="p">}</span>
         <span class="p">}</span><span class="o">,</span> 
         <span class="nx">failure</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">failure</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
               <span class="nx">callback</span><span class="p">.</span><span class="nx">failure</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="k">this</span><span class="o">,</span> <span class="p">{</span><span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;unable to fetch url &quot;</span><span class="o">+</span><span class="nx">url</span><span class="p">});</span>
            <span class="p">}</span>
         <span class="p">}</span><span class="o">,</span>
         <span class="nx">scope</span><span class="o">:</span> <span class="k">this</span>
      <span class="p">});</span>
   <span class="p">}</span>
   
    
<span class="p">};</span>




<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">_requestId</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>


<span class="c">/**</span>
<span class="c"> * inputEx.RPC.Transport</span>
<span class="c"> * @class inputEx.RPC.Transport</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Transport</span> <span class="o">=</span> <span class="p">{</span>
   
	<span class="c">/**</span>
<span class="c">	 * Build a ajax request using &#39;POST&#39; method</span>
<span class="c">	 * @method POST</span>
<span class="c">	 * @param {Object} r Object specifying target, callback and data attributes</span>
<span class="c">	 */</span>
   <span class="s2">&quot;POST&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">util</span><span class="p">.</span><span class="nx">Connect</span><span class="p">.</span><span class="nx">asyncRequest</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="o">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">target</span><span class="o">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">callback</span><span class="o">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">data</span> <span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
	<span class="c">/**</span>
<span class="c">	 * Build a ajax request using &#39;GET&#39; method</span>
<span class="c">	 * @method GET</span>
<span class="c">	 * @param {Object} r Object specifying target, callback and data attributes</span>
<span class="c">	 */</span>
   <span class="s2">&quot;GET&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">util</span><span class="p">.</span><span class="nx">Connect</span><span class="p">.</span><span class="nx">asyncRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="o">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">target</span> <span class="o">+</span> <span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span> <span class="o">?</span> <span class="s1">&#39;?&#39;</span><span class="o">+</span>  <span class="nx">r</span><span class="p">.</span><span class="nx">data</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">callback</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
	<span class="c">/**</span>
<span class="c">	 * Build an ajax request using the right HTTP method</span>
<span class="c">	 * @method REST</span>
<span class="c">	 * @param {Object} r Object specifying target, callback and data attributes</span>
<span class="c">	 */</span>
   <span class="s2">&quot;REST&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
      <span class="c">// TODO</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="nx">jsonp_id</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
	<span class="c">/**</span>
<span class="c">	 * Receive data through JSONP (insert a script tag within the page)</span>
<span class="c">	 * @method JSONP</span>
<span class="c">	 * @param {Object} r Object specifying target, callback and data attributes</span>
<span class="c">	 */</span>
   <span class="s2">&quot;JSONP&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">r</span><span class="p">.</span><span class="nx">callbackParamName</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">callbackParamName</span> <span class="o">||</span> <span class="s2">&quot;callback&quot;</span><span class="o">;</span>
		<span class="kd">var</span> <span class="nx">fctName</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;inputEx.RPC.Transport.JSONP.jsonpCallback&quot;</span><span class="o">+</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Transport</span><span class="p">.</span><span class="nx">jsonp_id</span><span class="p">);</span>
		<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Transport</span><span class="p">[</span><span class="s2">&quot;JSONP&quot;</span><span class="p">][</span><span class="s2">&quot;jsonpCallback&quot;</span><span class="o">+</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Transport</span><span class="p">.</span><span class="nx">jsonp_id</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
      	<span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">callback</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">success</span><span class="p">))</span> <span class="p">{</span>
      	   <span class="nx">r</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">success</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="k">this</span><span class="o">,</span> <span class="nx">results</span><span class="p">);</span>
      	<span class="p">}</span>
		<span class="p">};</span>
   	<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Transport</span><span class="p">.</span><span class="nx">jsonp_id</span><span class="o">+=</span><span class="mi">1</span><span class="o">;</span>
      <span class="k">return</span> <span class="nx">util</span><span class="p">.</span><span class="nx">Get</span><span class="p">.</span><span class="nx">script</span><span class="p">(</span> <span class="nx">r</span><span class="p">.</span><span class="nx">target</span> <span class="o">+</span> <span class="p">((</span><span class="nx">r</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;?&#39;</span> <span class="o">:</span> <span class="s1">&#39;&amp;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">r</span><span class="p">.</span><span class="nx">data</span> <span class="o">+</span> <span class="s2">&quot;&amp;&quot;</span><span class="o">+</span><span class="nx">r</span><span class="p">.</span><span class="nx">callbackParamName</span><span class="o">+</span><span class="s2">&quot;=&quot;</span><span class="o">+</span><span class="nx">fctName</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
	<span class="c">/**</span>
<span class="c">	 * NOT implemented</span>
<span class="c">	 * @method TCP/IP</span>
<span class="c">	 */</span>
   <span class="s2">&quot;TCP/IP&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;TCP/IP transport not implemented !&quot;</span><span class="p">);</span>
   <span class="p">}</span>
   
<span class="p">};</span>


<span class="c">/**</span>
<span class="c"> * inputEx.RPC.Envelope</span>
<span class="c"> * @class inputEx.RPC.Envelope</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">RPC</span><span class="p">.</span><span class="nx">Envelope</span> <span class="o">=</span> <span class="p">{</span>
   
	<span class="c">/**</span>
<span class="c">	 * URL envelope</span>
<span class="c">	 * @class inputEx.RPC.Envelope.URL</span>
<span class="c">	 * @static</span>
<span class="c">	 */</span>
   <span class="s2">&quot;URL&quot;</span><span class="o">:</span>  <span class="p">{</span>
	
			<span class="c">/**</span>
<span class="c">			 * Serialize data into URI encoded parameters</span>
<span class="c">			 */</span>
         <span class="nx">serialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">smd</span><span class="o">,</span> <span class="nx">method</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">eURI</span> <span class="o">=</span> <span class="nb">encodeURIComponent</span><span class="o">;</span>
            <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">data</span><span class="p">){</span>
         	   <span class="k">if</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">name</span><span class="p">)){</span>
            	   <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
            		<span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)){</span>
            			<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
            				<span class="nx">params</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">eURI</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;=&quot;</span><span class="o">+</span><span class="nx">eURI</span><span class="p">(</span><span class="nx">value</span><span class="p">[</span><span class="nx">i</span><span class="p">]));</span>
            			<span class="p">}</span>
            		<span class="p">}</span><span class="k">else</span><span class="p">{</span>
            			<span class="nx">params</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">eURI</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;=&quot;</span><span class="o">+</span><span class="nx">eURI</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span>
            		<span class="p">}</span>
            	<span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="p">{</span>
   				<span class="nx">data</span><span class="o">:</span> <span class="nx">params</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&amp;&quot;</span><span class="p">)</span>
            <span class="p">};</span>   
         <span class="p">}</span><span class="o">,</span>
			<span class="c">/**</span>
<span class="c">			 * Deserialize</span>
<span class="c">			 */</span>
         <span class="nx">deserialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">results</span><span class="o">;</span>
         <span class="p">}</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">	 * PATH envelope</span>
<span class="c">	 * @class inputEx.RPC.Envelope.PATH</span>
<span class="c">	 * @static</span>
<span class="c">	 */</span>
   <span class="s2">&quot;PATH&quot;</span><span class="o">:</span> <span class="p">{</span>
		  <span class="c">/**</span>
<span class="c">		 	* serialize</span>
<span class="c">		   */</span>
        <span class="nx">serialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">smd</span><span class="o">,</span> <span class="nx">method</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
     			<span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">target</span> <span class="o">||</span> <span class="nx">smd</span><span class="p">.</span><span class="nx">target</span><span class="o">,</span> <span class="nx">i</span><span class="o">;</span>
     			<span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">data</span><span class="p">)){</span>
     				<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
     					<span class="nx">target</span> <span class="o">+=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
     				<span class="p">}</span>
     			<span class="p">}</span><span class="k">else</span><span class="p">{</span>
     				<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">data</span><span class="p">){</span>
     				   <span class="k">if</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
     					   <span class="nx">target</span> <span class="o">+=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  					   <span class="p">}</span>
     				<span class="p">}</span>
     			<span class="p">}</span>
           <span class="k">return</span> <span class="p">{</span>
              <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
              <span class="nx">target</span><span class="o">:</span> <span class="nx">target</span>
           <span class="p">};</span>   
        <span class="p">}</span><span class="o">,</span>
		  <span class="c">/**</span>
<span class="c">		 	* deserialize</span>
<span class="c">		   */</span>
        <span class="nx">deserialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
           <span class="k">return</span> <span class="nx">results</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>
    
	<span class="c">/**</span>
<span class="c">	 * JSON envelope</span>
<span class="c">	 * @class inputEx.RPC.Envelope.JSON</span>
<span class="c">	 * @static</span>
<span class="c">	 */</span>
   <span class="s2">&quot;JSON&quot;</span><span class="o">:</span> <span class="p">{</span>
		 <span class="c">/**</span>
<span class="c">		  * serialize</span>
<span class="c">		  */</span>
       <span class="nx">serialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">smd</span><span class="o">,</span> <span class="nx">method</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span>
             <span class="nx">data</span><span class="o">:</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
          <span class="p">};</span>   
       <span class="p">}</span><span class="o">,</span>
 		 <span class="c">/**</span>
<span class="c">		  * deserialize</span>
<span class="c">		  */</span>
       <span class="nx">deserialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">results</span><span class="o">;</span>
       <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>
   
	<span class="c">/**</span>
<span class="c">	 * JSON-RPC-1.0 envelope</span>
<span class="c">	 * @class inputEx.RPC.Envelope.JSON-RPC-1.0</span>
<span class="c">	 * @static</span>
<span class="c">	 */</span>
   <span class="s2">&quot;JSON-RPC-1.0&quot;</span><span class="o">:</span>  <span class="p">{</span>
		 <span class="c">/**</span>
<span class="c">		  * serialize</span>
<span class="c">		  */</span>
       <span class="nx">serialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">smd</span><span class="o">,</span> <span class="nx">method</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span>
             <span class="nx">data</span><span class="o">:</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
       	      <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="nx">rpc</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">_requestId</span><span class="o">++,</span>
       	      <span class="s2">&quot;method&quot;</span><span class="o">:</span> <span class="nx">method</span><span class="p">.</span><span class="nx">name</span><span class="o">,</span>
       	      <span class="s2">&quot;params&quot;</span><span class="o">:</span> <span class="nx">data</span>
       	   <span class="p">})</span>
          <span class="p">};</span>   
       <span class="p">}</span><span class="o">,</span>
	 	 <span class="c">/**</span>
<span class="c">		  * deserialize</span>
<span class="c">		  */</span>
       <span class="nx">deserialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">results</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
       <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">	 * JSON-RPC-2.0 envelope</span>
<span class="c">	 * @class inputEx.RPC.Envelope.JSON-RPC-2.0</span>
<span class="c">	 * @static</span>
<span class="c">	 */</span>
   <span class="s2">&quot;JSON-RPC-2.0&quot;</span><span class="o">:</span> <span class="p">{</span>
		<span class="c">/**</span>
<span class="c">  	  	 * serialize</span>
<span class="c">		 */</span>
      <span class="nx">serialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">smd</span><span class="o">,</span> <span class="nx">method</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="p">{</span>
            <span class="nx">data</span><span class="o">:</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
      	      <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="nx">rpc</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">_requestId</span><span class="o">++,</span>
      	      <span class="s2">&quot;method&quot;</span><span class="o">:</span> <span class="nx">method</span><span class="p">.</span><span class="nx">name</span><span class="o">,</span>
      	      <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;json-rpc-2.0&quot;</span><span class="o">,</span>
      	      <span class="s2">&quot;params&quot;</span><span class="o">:</span> <span class="nx">data</span>
      	   <span class="p">})</span>
         <span class="p">};</span>   
      <span class="p">}</span><span class="o">,</span>
		<span class="c">/**</span>
<span class="c"> 	 	 * serialize</span>
<span class="c">		 */</span>
      <span class="nx">deserialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">results</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
      <span class="p">}</span>
   <span class="p">}</span>
   
<span class="p">};</span>

<span class="p">})();</span>
</pre></div>
