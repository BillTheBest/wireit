<div class="highlight"><pre><span class="c">/**</span>
<span class="c"> * &lt;h1&gt;inputEx YQL utility&lt;/h1&gt;</span>
<span class="c"> * &lt;p&gt;Provide functions to run YQL javascript code and get results asynchronously.&lt;/p&gt;</span>
<span class="c"> * &lt;p&gt;YQL Execute is only available from a YQL request using a YQL Open Table XML file.</span>
<span class="c"> * This script uses a php (http://javascript.neyric.com/yql/js.php) to generate the wanted XML file from javascript code.&lt;/p&gt;</span>
<span class="c"> * &lt;p&gt;Examples:&lt;/p&gt;</span>
<span class="c"> * &lt;ul&gt;</span>
<span class="c"> *    &lt;li&gt;&lt;a href=&#39;http://javascript.neyric.com/yql/js.php?url=http://gist.github.com/106503.txt&#39;&gt;http://javascript.neyric.com/yql/js.php?url=http://gist.github.com/106503.txt&lt;/a&gt;&lt;/li&gt;</span>
<span class="c"> *    &lt;li&gt;&lt;a href=&#39;http://javascript.neyric.com/yql/js.php?code=...jscode...&#39;&gt;http://javascript.neyric.com/yql/js.php?code=...jscode...&lt;/a&gt;&lt;/li&gt;</span>
<span class="c"> * &lt;/ul&gt;</span>
<span class="c"> * &lt;p&gt;We use a classic JSONP hack to get the results via a callback method.&lt;/p&gt;</span>
<span class="c"> * @class inputEx.YQL</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">YQL</span> <span class="o">=</span> <span class="p">{</span>
	
	<span class="c">// Used as an identifier for the JSONP callback hack</span>
	<span class="nx">query_index</span><span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * Generate the jsonp request to YQL</span>
<span class="c">	 * @param {String} yql YQL query string</span>
<span class="c">	 * @param {Function} callback Callback function</span>
<span class="c">	 */</span>
	<span class="nx">query</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">yql</span><span class="o">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
		 <span class="kd">var</span> <span class="nx">ud</span> <span class="o">=</span> <span class="s1">&#39;yqlexecuteconsole&#39;</span><span class="o">+</span><span class="p">(</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">YQL</span><span class="p">.</span><span class="nx">query_index</span><span class="p">)</span><span class="o">++,</span>
		      <span class="nx">API</span> <span class="o">=</span> <span class="s1">&#39;http://query.yahooapis.com/v1/public/yql?q=&#39;</span><span class="o">,</span>
		      <span class="nx">url</span> <span class="o">=</span> <span class="nx">API</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">yql</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&amp;format=json&amp;callback=&#39;</span> <span class="o">+</span> <span class="nx">ud</span><span class="o">;</span>
		 <span class="nb">window</span><span class="p">[</span><span class="nx">ud</span><span class="p">]</span><span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">){</span> <span class="nx">callback</span> <span class="o">&amp;&amp;</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span> <span class="p">};</span>
	    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">((</span><span class="kd">function</span><span class="p">(){</span>
		    <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
          <span class="nx">s</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="o">;</span>
	       <span class="nx">s</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">url</span><span class="o">;</span>
	       <span class="k">return</span> <span class="nx">s</span><span class="o">;</span>
	    <span class="p">})());</span>	
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * Dynamically build a XML from javascript code and generate a dummy request for YQL</span>
<span class="c">	 * @param {String} codeStr YQL-execute javascript code</span>
<span class="c">	 * @param {Function} callback Callback function</span>
<span class="c">	 */</span>
	<span class="nx">queryCode</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">codeStr</span><span class="o">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;http://javascript.neyric.com/yql/js.php?code=&quot;</span><span class="o">+</span><span class="nb">window</span><span class="p">.</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">codeStr</span><span class="p">)).</span><span class="nx">replace</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;&#39;&quot;</span><span class="o">,</span><span class="s2">&quot;g&quot;</span><span class="p">)</span><span class="o">,</span><span class="s2">&quot;\\&#39;&quot;</span><span class="p">);</span>
		<span class="kd">var</span> <span class="nx">yql</span> <span class="o">=</span> <span class="s2">&quot;use &#39;&quot;</span><span class="o">+</span><span class="nx">url</span><span class="o">+</span><span class="s2">&quot;&#39; as yqlexconsole; select * from yqlexconsole;&quot;</span><span class="o">;</span>
		<span class="nx">inputEx</span><span class="p">.</span><span class="nx">YQL</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="nx">yql</span><span class="o">,</span><span class="nx">callback</span><span class="p">);</span>
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * Dynamically build a XML from a URL and generate a dummy request for YQL</span>
<span class="c">	 * @param {String} codeUrl Url to a YQL-execute javascript file</span>
<span class="c">	 * @param {Function} callback Callback function</span>
<span class="c">	 */</span>
	<span class="nx">queryUrl</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">codeUrl</span><span class="o">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
	   <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;http://javascript.neyric.com/yql/js.php?url=&quot;</span><span class="o">+</span><span class="nb">window</span><span class="p">.</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">codeUrl</span><span class="p">)).</span><span class="nx">replace</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;&#39;&quot;</span><span class="o">,</span><span class="s2">&quot;g&quot;</span><span class="p">)</span><span class="o">,</span><span class="s2">&quot;\\&#39;&quot;</span><span class="p">);</span>
		<span class="kd">var</span> <span class="nx">yql</span> <span class="o">=</span> <span class="s2">&quot;use &#39;&quot;</span><span class="o">+</span><span class="nx">url</span><span class="o">+</span><span class="s2">&quot;&#39; as yqlexconsole; select * from yqlexconsole;&quot;</span><span class="o">;</span>
		<span class="nx">inputEx</span><span class="p">.</span><span class="nx">YQL</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="nx">yql</span><span class="o">,</span><span class="nx">callback</span><span class="p">);</span>
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * Run script type=&quot;text/yql&quot; tags on YQL servers</span>
<span class="c">	 * If you have just one script tag and one callback, pass [[function(results) {}]]</span>
<span class="c">	 * If you have two script tags and two callback for each: [ [function() {},function() {}] , [function() {},function() {}]]</span>
<span class="c">	 * etc...</span>
<span class="c">	 * @param {Array} callbacks Array of (list of callbacks functions) (provide a list of callbacks for each script type=&quot;text/yql&quot; tag in the page)</span>
<span class="c">	 */</span>
	<span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callbacks</span><span class="p">)</span> <span class="p">{</span>
	   <span class="kd">var</span> <span class="nx">yqlScripts</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">getElementsBy</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
   		<span class="k">return</span> <span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">type</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s2">&quot;text/yql&quot;</span><span class="p">);</span>
   	<span class="p">}</span> <span class="o">,</span> <span class="s2">&quot;script&quot;</span> <span class="p">);</span>

      <span class="kd">var</span> <span class="nx">genCallbackFunction</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fcts</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">fcts</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">fcts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">results</span><span class="p">);</span>
            <span class="p">}</span>
         <span class="p">};</span>
      <span class="p">};</span>

      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">yqlScripts</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">var</span> <span class="nx">yqlCode</span> <span class="o">=</span> <span class="nx">yqlScripts</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">innerHTML</span><span class="o">;</span>
      	<span class="nx">inputEx</span><span class="p">.</span><span class="nx">YQL</span><span class="p">.</span><span class="nx">queryCode</span><span class="p">(</span><span class="nx">yqlCode</span><span class="o">,</span> <span class="nx">genCallbackFunction</span><span class="p">(</span><span class="nx">callbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">);</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * YQL-trimpath-page is a utility to create pages using YQL queries ant Trimpath templating</span>
<span class="c">	 * All YQL queries are made using the rpc/yql.js utility.</span>
<span class="c">	 * see examples/yql-trimpath-page.html</span>
<span class="c">	 * Call this method on page load to run yql queries and the associated templates</span>
<span class="c">	 * @param {Array} additionalCallbacks List of [list of callbacks] (each yql query can call multiple callbacks)</span>
<span class="c">	 */</span>
	<span class="nx">initTrimpathPage</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">additionalCallbacks</span><span class="p">)</span> <span class="p">{</span>
   
		 <span class="kd">var</span> <span class="nx">templates</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">getElementsBy</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
	   		<span class="k">return</span> <span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">type</span> <span class="o">&amp;&amp;</span> <span class="nx">el</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s2">&quot;text/trimpath&quot;</span><span class="p">);</span>
	   <span class="p">}</span> <span class="o">,</span> <span class="s2">&quot;script&quot;</span> <span class="p">);</span>

	 	<span class="kd">var</span> <span class="nx">callbacks</span> <span class="o">=</span> <span class="p">[];</span>

		<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">templates</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">templates</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
			<span class="kd">var</span> <span class="nx">split</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">src</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">);</span>
			<span class="kd">var</span> <span class="nx">requestId</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">split</span><span class="p">[</span><span class="nx">split</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">,</span> <span class="mi">10</span><span class="p">);</span>
			<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">callbacks</span><span class="p">[</span><span class="nx">requestId</span><span class="p">])</span> <span class="nx">callbacks</span><span class="p">[</span><span class="nx">requestId</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
			<span class="nx">callbacks</span><span class="p">[</span><span class="nx">requestId</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">YQL</span><span class="p">.</span><span class="nx">genTrimpathCallback</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">);</span>
		<span class="p">}</span>
	
		<span class="k">if</span><span class="p">(</span><span class="nx">additionalCallbacks</span><span class="p">)</span> <span class="p">{</span>
		   <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">additionalCallbacks</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		      <span class="kd">var</span> <span class="nx">cbks</span> <span class="o">=</span> <span class="nx">additionalCallbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
		      <span class="k">if</span><span class="p">(</span><span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">cbks</span><span class="p">))</span> <span class="p">{</span>
		         <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">callbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="nx">callbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
		         <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">cbks</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	   		      <span class="nx">callbacks</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span> <span class="nx">cbks</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">);</span>
			      <span class="p">}</span>
		      <span class="p">}</span>
		   <span class="p">}</span>
	   <span class="p">}</span>

		<span class="nx">inputEx</span><span class="p">.</span><span class="nx">YQL</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">callbacks</span><span class="p">);</span>
	<span class="p">}</span><span class="o">,</span>

	<span class="c">/**</span>
<span class="c">	 * Build a callback that runs a trimpath template (used by initTrimpathPage)</span>
<span class="c">	 * @static</span>
<span class="c">	 * @private</span>
<span class="c">	 */</span>
	<span class="nx">genTrimpathCallback</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scriptTag</span><span class="p">)</span> <span class="p">{</span>
	  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
	     <span class="kd">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">TrimPath</span><span class="p">.</span><span class="nx">parseTemplate</span><span class="p">(</span><span class="nx">scriptTag</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">);</span>
		  <span class="kd">var</span> <span class="nx">templateResult</span> <span class="o">=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
	     <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s2">&quot;&lt;div class=&#39;trimpathDiv&#39;&gt;&quot;</span><span class="o">+</span><span class="nx">templateResult</span><span class="o">+</span><span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="o">;</span>
	  <span class="p">};</span>
	<span class="p">}</span>

<span class="p">};</span>
</pre></div>
