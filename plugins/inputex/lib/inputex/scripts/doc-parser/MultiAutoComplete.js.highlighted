<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

   <span class="kd">var</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * Create a multi autocomplete field</span>
<span class="c"> * @class inputEx.MultiAutoComplete</span>
<span class="c"> * @extends inputEx.AutoComplete</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param {Object} options Added options:</span>
<span class="c"> * &lt;ul&gt;</span>
<span class="c"> * &lt;/ul&gt;</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">MultiAutoComplete</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">inputEx</span><span class="p">.</span><span class="nx">MultiAutoComplete</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span><span class="nx">options</span><span class="p">);</span>
 <span class="p">};</span>
<span class="nx">lang</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">MultiAutoComplete</span><span class="o">,</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">AutoComplete</span><span class="o">,</span> <span class="p">{</span>
   
   <span class="c">/**</span>
<span class="c">    * Build the DDList</span>
<span class="c">    */</span>
   <span class="nx">renderComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">inputEx</span><span class="p">.</span><span class="nx">MultiAutoComplete</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">ddlist</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">DDList</span><span class="p">({</span><span class="nx">parentEl</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">fieldContainer</span><span class="p">});</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">ddlist</span><span class="p">.</span><span class="nx">itemRemovedEvt</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">setClassFromState</span><span class="p">();</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">fireUpdatedEvt</span><span class="p">();</span>
      <span class="p">}</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">ddlist</span><span class="p">.</span><span class="nx">listReorderedEvt</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fireUpdatedEvt</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>  
   
   <span class="c">/**</span>
<span class="c">    * Additional options</span>
<span class="c">    */</span>
   <span class="nx">setOptions</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">inputEx</span><span class="p">.</span><span class="nx">MultiAutoComplete</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">options</span><span class="p">);</span>
      
      <span class="c">// Method to format the ddlist item labels</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">returnLabel</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">returnLabel</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Handle item selection in the autocompleter to add it to the list</span>
<span class="c">    */</span>
   <span class="nx">itemSelectHandler</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sType</span><span class="o">,</span> <span class="nx">aArgs</span><span class="p">)</span> <span class="p">{</span>
   	<span class="kd">var</span> <span class="nx">aData</span> <span class="o">=</span> <span class="nx">aArgs</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
   	<span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">returnValue</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">returnValue</span><span class="p">(</span><span class="nx">aData</span><span class="p">)</span> <span class="o">:</span> <span class="nx">aData</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
   	<span class="kd">var</span> <span class="kd">label</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">returnLabel</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">returnLabel</span><span class="p">(</span><span class="nx">aData</span><span class="p">)</span> <span class="o">:</span> <span class="nx">value</span><span class="o">;</span>   	
   	<span class="k">this</span><span class="p">.</span><span class="nx">ddlist</span><span class="p">.</span><span class="nx">addItem</span><span class="p">({</span><span class="kd">label</span><span class="o">:</span> <span class="kd">label</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="nx">value</span><span class="p">});</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">fireUpdatedEvt</span><span class="p">();</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Set the value</span>
<span class="c">    * @param {String} value The value to set</span>
<span class="c">    * @param {boolean} [sendUpdatedEvt] (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)</span>
<span class="c">    */</span>
   <span class="nx">setValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="o">,</span> <span class="nx">sendUpdatedEvt</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">ddlist</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
      
      <span class="c">// set corresponding style</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">setClassFromState</span><span class="p">();</span>
	   
	   <span class="k">if</span><span class="p">(</span><span class="nx">sendUpdatedEvt</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
	      <span class="c">// fire update event</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">fireUpdatedEvt</span><span class="p">();</span>
      <span class="p">}</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Return the value</span>
<span class="c">    * @return {Any} the selected value from the selectValues array</span>
<span class="c">    */</span>
   <span class="nx">getValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">ddlist</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Return (stateEmpty|stateRequired) if the value equals the typeInvite attribute</span>
<span class="c">    */</span>
   <span class="nx">getState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
      <span class="kd">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span>
      
	   <span class="c">// if nothing in the list</span>
	   <span class="k">if</span><span class="p">(</span> <span class="nx">val</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span> <span class="o">?</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateRequired</span> <span class="o">:</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateEmpty</span><span class="o">;</span>
	   <span class="p">}</span>
      
	   <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">()</span> <span class="o">?</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateValid</span> <span class="o">:</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateInvalid</span><span class="o">;</span>
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">    * TODO : how to validate ?</span>
<span class="c">    */</span>
   <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * onChange event handler</span>
<span class="c">    * @param {Event} e The original &#39;change&#39; event</span>
<span class="c">    */</span>
	<span class="nx">onChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	   <span class="c">// erase inherited version, so don&#39;t trash previous value if input is empty</span>
	<span class="p">}</span>
   
   
<span class="p">});</span>

<span class="c">// Register this class as &quot;multiautocomplete&quot; type</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">registerType</span><span class="p">(</span><span class="s2">&quot;multiautocomplete&quot;</span><span class="o">,</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">MultiAutoComplete</span><span class="p">);</span>

<span class="p">})();</span>
</pre></div>
