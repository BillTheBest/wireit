<div class="highlight"><pre><span class="c">/**</span>
<span class="c"> * The inputEx Library</span>
<span class="c"> * @module inputEx</span>
<span class="c"> */</span>
<span class="c">/*global inputEx: false, YAHOO: false */</span>
<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
 
 <span class="kd">var</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">;</span>
 
<span class="c">/**</span>
<span class="c"> * The inputEx method lets you create a field from the JSON definition:</span>
<span class="c"> * &lt;pre&gt;</span>
<span class="c"> *    inputEx({type: &#39;string&#39;, name: &#39;company&#39;, label: &#39;Your company&#39; })</span>
<span class="c"> * &lt;/pre&gt;</span>
<span class="c"> * Build a field from an object like: { type: &#39;color&#39; or fieldClass: inputEx.ColorField, ... }&lt;br /&gt;</span>
<span class="c"> * If the neither type or fieldClass are found, it uses inputEx.StringField</span>
<span class="c"> *</span>
<span class="c"> * @class inputEx</span>
<span class="c"> * @static</span>
<span class="c"> * @param {Object} fieldOptions</span>
<span class="c"> * @param {inputEx.Group|inputEx.Form|inputEx.ListField|inputEx.CombineField} (optional) parentField The parent field instance</span>
<span class="c"> * @return {inputEx.Field} Created field instance</span>
<span class="c"> */</span>
<span class="nx">inputEx</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="o">,</span> <span class="nx">parentField</span><span class="p">)</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">fieldClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
       <span class="nx">inputInstance</span><span class="o">;</span>
   
	<span class="k">if</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
	   <span class="nx">fieldClass</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">getFieldClass</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span>
	   <span class="k">if</span><span class="p">(</span><span class="nx">fieldClass</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="nx">fieldClass</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="o">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
	   <span class="nx">fieldClass</span> <span class="o">=</span> <span class="nx">fieldOptions</span><span class="p">.</span><span class="nx">fieldClass</span> <span class="o">?</span> <span class="nx">fieldOptions</span><span class="p">.</span><span class="nx">fieldClass</span> <span class="o">:</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="o">;</span>
	<span class="p">}</span>

   <span class="c">// Instanciate the field</span>
   
   <span class="c">// Retro-compatibility with deprecated inputParams Object</span>
   <span class="k">if</span> <span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">.</span><span class="nx">inputParams</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">inputInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">fieldClass</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">.</span><span class="nx">inputParams</span><span class="p">);</span>
      
   <span class="c">// New prefered way to instanciate a field</span>
   <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">inputInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">fieldClass</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">);</span>
   <span class="p">}</span>

	<span class="c">// If the parentField argument is provided</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">parentField</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">inputInstance</span><span class="p">.</span><span class="nx">setParentField</span><span class="p">(</span><span class="nx">parentField</span><span class="p">);</span>
	<span class="p">}</span>

   <span class="c">// Add the flatten attribute if present in the params</span>
   <span class="c">/*if(fieldOptions.flatten) {</span>
<span class="c">      inputInstance._flatten = true;</span>
<span class="c">   }*/</span>
	  
   <span class="k">return</span> <span class="nx">inputInstance</span><span class="o">;</span>
<span class="p">};</span>

<span class="nx">lang</span><span class="p">.</span><span class="nx">augmentObject</span><span class="p">(</span><span class="nx">inputEx</span><span class="o">,</span> <span class="p">{</span>
   
   <span class="nx">VERSION</span><span class="o">:</span> <span class="s2">&quot;0.5.0&quot;</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Url to the spacer image. This url schould be changed according to your project directories</span>
<span class="c">    * @type String</span>
<span class="c">    */</span>
   <span class="nx">spacerUrl</span><span class="o">:</span> <span class="s2">&quot;images/space.gif&quot;</span><span class="o">,</span> <span class="c">// 1x1 px</span>
   
   <span class="c">/**</span>
<span class="c">    * Field empty state constant</span>
<span class="c">    * @type String</span>
<span class="c">    */</span>
   <span class="nx">stateEmpty</span><span class="o">:</span> <span class="s1">&#39;empty&#39;</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Field required state constant</span>
<span class="c">    * @type String</span>
<span class="c">    */</span>
   <span class="nx">stateRequired</span><span class="o">:</span> <span class="s1">&#39;required&#39;</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Field valid state constant</span>
<span class="c">    * @type String</span>
<span class="c">    */</span>
   <span class="nx">stateValid</span><span class="o">:</span> <span class="s1">&#39;valid&#39;</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Field invalid state constant</span>
<span class="c">    * @type String</span>
<span class="c">    */</span>
   <span class="nx">stateInvalid</span><span class="o">:</span> <span class="s1">&#39;invalid&#39;</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Associative array containing field messages</span>
<span class="c">    */</span>
   <span class="nx">messages</span><span class="o">:</span> <span class="p">{</span>
   	<span class="nx">required</span><span class="o">:</span> <span class="s2">&quot;This field is required&quot;</span><span class="o">,</span>
   	<span class="nx">invalid</span><span class="o">:</span> <span class="s2">&quot;This field is invalid&quot;</span><span class="o">,</span>
   	<span class="nx">valid</span><span class="o">:</span> <span class="s2">&quot;This field is valid&quot;</span><span class="o">,</span>
   	<span class="nx">defaultDateFormat</span><span class="o">:</span> <span class="s2">&quot;m/d/Y&quot;</span><span class="o">,</span>
   	<span class="nx">months</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;January&quot;</span><span class="o">,</span> <span class="s2">&quot;February&quot;</span><span class="o">,</span> <span class="s2">&quot;March&quot;</span><span class="o">,</span> <span class="s2">&quot;April&quot;</span><span class="o">,</span> <span class="s2">&quot;May&quot;</span><span class="o">,</span> <span class="s2">&quot;June&quot;</span><span class="o">,</span> <span class="s2">&quot;July&quot;</span><span class="o">,</span> <span class="s2">&quot;August&quot;</span><span class="o">,</span> <span class="s2">&quot;September&quot;</span><span class="o">,</span> <span class="s2">&quot;October&quot;</span><span class="o">,</span> <span class="s2">&quot;November&quot;</span><span class="o">,</span> <span class="s2">&quot;December&quot;</span><span class="p">]</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * inputEx widget namespace</span>
<span class="c">    * @static </span>
<span class="c">    */</span>
   <span class="nx">widget</span><span class="o">:</span> <span class="p">{}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Associative array containing common regular expressions</span>
<span class="c">    */</span>
   <span class="nx">regexps</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">email</span><span class="o">:</span> <span class="sr">/^(([^&lt;&gt;()[\]\\.,;:\s@\&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@\&quot;]+)*)|(\&quot;.+\&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/</span><span class="o">,</span>
      <span class="nx">url</span><span class="o">:</span> <span class="sr">/^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$/i</span><span class="o">,</span>
      <span class="nx">password</span><span class="o">:</span> <span class="o">/^</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="nx">a</span><span class="o">-</span><span class="nx">zA</span><span class="o">-</span><span class="nx">Z</span><span class="o">\</span><span class="nx">x20</span><span class="o">-\</span><span class="nx">x7E</span><span class="p">]</span><span class="o">*</span><span class="nx">$</span><span class="o">/</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Hash between inputEx types and classes (ex: &lt;code&gt;inputEx.typeClasses.color = inputEx.ColorField&lt;/code&gt;)&lt;br /&gt;</span>
<span class="c">    * Please register the types with the &lt;code&gt;registerType&lt;/code&gt; method</span>
<span class="c">    */</span>
   <span class="nx">typeClasses</span><span class="o">:</span> <span class="p">{}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * When you create a new inputEx Field Class, you can register it to give it a simple type.</span>
<span class="c">    * ex:   inputEx.registerType(&quot;color&quot;, inputEx.ColorField);</span>
<span class="c">    * @static</span>
<span class="c">    * @param {String} type String used as the inputEx field type</span>
<span class="c">    * @param {Class} fieldClass Field Class to register as this type</span>
<span class="c">	 * @param {Array} groupOptions List of inputEx field description for each option</span>
<span class="c">	 * @param {Boolean} dontInherit Won&#39;t inherhit the parent field properties if set to true</span>
<span class="c">    */</span>
   <span class="nx">registerType</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="o">,</span> <span class="nx">fieldClass</span><span class="o">,</span> <span class="nx">groupOptions</span><span class="o">,</span> <span class="nx">dontInherit</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">type</span><span class="p">))</span> <span class="p">{</span>
         <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;inputEx.registerType: first argument must be a string&quot;</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">fieldClass</span><span class="p">))</span> <span class="p">{</span>
         <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;inputEx.registerType: second argument must be a function&quot;</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">typeClasses</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fieldClass</span><span class="o">;</span>
      
      <span class="c">// Setup the groupOptions property on the class</span>
      <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">[];</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">groupOptions</span><span class="p">))</span> <span class="p">{</span> <span class="nx">opts</span> <span class="o">=</span> <span class="nx">groupOptions</span><span class="o">;</span> <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">fieldClass</span><span class="p">.</span><span class="nx">superclass</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">dontInherit</span> <span class="o">&amp;&amp;</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">fieldClass</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">groupOptions</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
         <span class="nx">opts</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">fieldClass</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">groupOptions</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nx">fieldClass</span><span class="p">.</span><span class="nx">groupOptions</span> <span class="o">=</span> <span class="nx">opts</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Returns the class for the given type</span>
<span class="c">    * ex: inputEx.getFieldClass(&quot;color&quot;) returns inputEx.ColorField</span>
<span class="c">    * @static</span>
<span class="c">    * @param {String} type String type of the field</span>
<span class="c">    */</span>
   <span class="nx">getFieldClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">typeClasses</span><span class="p">[</span><span class="nx">type</span><span class="p">])</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">typeClasses</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Get the inputex type for the given class (ex: &lt;code&gt;inputEx.getType(inputEx.ColorField)&lt;/code&gt; returns &quot;color&quot;)</span>
<span class="c">    * @static</span>
<span class="c">    * @param {inputEx.Field} FieldClass An inputEx.Field or derivated class</span>
<span class="c">    * @return {String} returns the inputEx type string or &lt;code&gt;null&lt;/code&gt;</span>
<span class="c">    */</span>
   <span class="nx">getType</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">FieldClass</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">type</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">typeClasses</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">typeClasses</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">typeClasses</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">==</span> <span class="nx">FieldClass</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">return</span> <span class="nx">type</span><span class="o">;</span>
            <span class="p">}</span>
         <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * @deprecated Kept for backward compatibility (alias for inputEx() )</span>
<span class="c">    * @param {Object} fieldOptions</span>
<span class="c">    * @return {inputEx.Field} Created field instance</span>
<span class="c">    */</span>
   <span class="nx">buildField</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">)</span> <span class="p">{</span>      
      <span class="k">return</span> <span class="nx">inputEx</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Helper function to set DOM node attributes and style attributes.</span>
<span class="c">    * @static</span>
<span class="c">    * @param {HTMLElement} el The element to set attributes to</span>
<span class="c">    * @param {Object} domAttributes An object containing key/value pairs to set as node attributes (ex: {id: &#39;myElement&#39;, className: &#39;myCssClass&#39;, ...})</span>
<span class="c">    * @param {Object} styleAttributes Same thing for style attributes. Please use camelCase for style attributes (ex: backgroundColor for &#39;background-color&#39;)</span>
<span class="c">    */</span>
   <span class="nx">sn</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="o">,</span><span class="nx">domAttributes</span><span class="o">,</span><span class="nx">styleAttributes</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="o">;</span> <span class="p">}</span>
		<span class="kd">var</span> <span class="nx">i</span><span class="o">;</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">domAttributes</span><span class="p">){</span>
         <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">domAttributes</span><span class="p">){</span>
            <span class="kd">var</span> <span class="nx">domAttribute</span> <span class="o">=</span> <span class="nx">domAttributes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">domAttribute</span><span class="p">)</span> <span class="p">){</span>
               <span class="k">continue</span><span class="o">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">==</span><span class="s2">&quot;className&quot;</span><span class="p">){</span>
               <span class="nx">i</span><span class="o">=</span><span class="s2">&quot;class&quot;</span><span class="o">;</span>
               <span class="nx">el</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="nx">domAttribute</span><span class="o">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">domAttribute</span><span class="o">!==</span><span class="nx">el</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">i</span><span class="p">)){</span>
               <span class="k">try</span><span class="p">{</span>
                  <span class="k">if</span><span class="p">(</span><span class="nx">domAttribute</span><span class="o">===</span><span class="kc">false</span><span class="p">){</span>
                     <span class="nx">el</span><span class="p">.</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
                  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                     <span class="nx">el</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">i</span><span class="o">,</span><span class="nx">domAttribute</span><span class="p">);</span>
                  <span class="p">}</span>
               <span class="p">}</span>
               <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
                  <span class="c">//console.log(&quot;WARNING: WireIt.sn failed for &quot;+el.tagName+&quot;, attr &quot;+i+&quot;, val &quot;+domAttribute);</span>
               <span class="p">}</span>
            <span class="p">}</span>
         <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">if</span><span class="p">(</span><span class="nx">styleAttributes</span><span class="p">){</span>
         <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">styleAttributes</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">styleAttributes</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">){</span>
               <span class="k">continue</span><span class="o">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">!=</span><span class="nx">styleAttributes</span><span class="p">[</span><span class="nx">i</span><span class="p">]){</span>
               <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">styleAttributes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span>
         <span class="p">}</span>
      <span class="p">}</span>
   <span class="p">}</span><span class="o">,</span>


   <span class="c">/**</span>
<span class="c">    * Helper function to create a DOM node. (wrapps the document.createElement tag and the inputEx.sn functions)</span>
<span class="c">    * @static</span>
<span class="c">    * @param {String} tag The tagName to create (ex: &#39;div&#39;, &#39;a&#39;, ...)</span>
<span class="c">    * @param {Object} [domAttributes] see inputEx.sn</span>
<span class="c">    * @param {Object} [styleAttributes] see inputEx.sn</span>
<span class="c">    * @param {String} [innerHTML] The html string to append into the created element</span>
<span class="c">    * @return {HTMLElement} The created node</span>
<span class="c">    */</span>
   <span class="nx">cn</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tag</span><span class="o">,</span> <span class="nx">domAttributes</span><span class="o">,</span> <span class="nx">styleAttributes</span><span class="o">,</span> <span class="nx">innerHTML</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span> <span class="o">==</span> <span class="s1">&#39;input&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">ie</span><span class="p">)</span> <span class="p">{</span> <span class="c">//only limit to input tag that has no tag body</span>
            <span class="kd">var</span> <span class="nx">strDom</span> <span class="o">=</span> <span class="s1">&#39;&lt;&#39;</span> <span class="o">+</span> <span class="nx">tag</span><span class="o">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">domAttributes</span><span class="o">!==</span><span class="s1">&#39;undefined&#39;</span><span class="p">){</span>
                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">domAttributes</span><span class="p">){</span>
                    <span class="nx">strDom</span> <span class="o">+=</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">k</span> <span class="o">+</span> <span class="s1">&#39;=&quot;&#39;</span> <span class="o">+</span> <span class="nx">domAttributes</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="nx">strDom</span> <span class="o">+=</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="s1">&#39;&gt;&#39;</span><span class="o">;</span>
            <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">strDom</span><span class="p">);</span>

        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">tag</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">sn</span><span class="p">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">domAttributes</span><span class="o">,</span> <span class="nx">styleAttributes</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">innerHTML</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">el</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">innerHTML</span><span class="o">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">el</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>
   
   
   <span class="c">/**</span>
<span class="c">    * Find the position of the given element. (This method is not available in IE 6)</span>
<span class="c">    * @static</span>
<span class="c">    * @param {Object} el Value to search</span>
<span class="c">    * @param {Array} arr The array to search</span>
<span class="c">    * @return {number} Element position, -1 if not found</span>
<span class="c">    */</span>
   <span class="nx">indexOf</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="o">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span><span class="nx">i</span><span class="o">;</span>
      <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">el</span><span class="p">)</span> <span class="k">return</span> <span class="nx">i</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   
   <span class="c">/**</span>
<span class="c">    * Create a new array without the null or undefined values</span>
<span class="c">    * @static</span>
<span class="c">    * @param {Array} arr The array to compact</span>
<span class="c">    * @return {Array} The new array</span>
<span class="c">    */</span>
   <span class="nx">compactArray</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">l</span><span class="o">=</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span><span class="nx">i</span><span class="o">;</span>
      <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isNull</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">)</span> <span class="p">{</span>
            <span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
         <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">n</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

	<span class="c">/**</span>
<span class="c">	 * Return a string without accent (only on lowercase)</span>
<span class="c">	 * @static</span>
<span class="c">	 * @param {String} str The string</span>
<span class="c">	 * @return {String} String without accent</span>
<span class="c">	 */</span>
	<span class="nx">removeAccents</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
	   <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[àáâãäå]/g</span><span class="o">,</span><span class="s2">&quot;a&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[èéêë]/g</span><span class="o">,</span><span class="s2">&quot;e&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[ìíîï]/g</span><span class="o">,</span><span class="s2">&quot;i&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[òóôõö]/g</span><span class="o">,</span><span class="s2">&quot;o&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[ùúûü]/g</span><span class="o">,</span><span class="s2">&quot;u&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[ýÿ]/g</span><span class="o">,</span><span class="s2">&quot;y&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[ñ]/g</span><span class="o">,</span><span class="s2">&quot;n&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[ç]/g</span><span class="o">,</span><span class="s2">&quot;c&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[œ]/g</span><span class="o">,</span><span class="s2">&quot;oe&quot;</span><span class="p">).</span>
					  <span class="nx">replace</span><span class="p">(</span><span class="sr">/[æ]/g</span><span class="o">,</span><span class="s2">&quot;ae&quot;</span><span class="p">);</span>
	<span class="p">}</span>
   
<span class="p">});</span>

<span class="p">})();</span>


<span class="c">// The main inputEx namespace shortcut</span>
<span class="nx">YAHOO</span><span class="p">.</span><span class="nx">inputEx</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="o">;</span>
</pre></div>
