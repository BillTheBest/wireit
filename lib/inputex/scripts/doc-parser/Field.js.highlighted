<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">Dom</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="o">,</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">,</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="o">;</span>

<span class="c">/** </span>
<span class="c"> * An abstract class (never instantiated) that contains the shared features for all fields.</span>
<span class="c"> * @class inputEx.Field</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param {Object} options Configuration object</span>
<span class="c"> * &lt;ul&gt;</span>
<span class="c"> *	  &lt;li&gt;name: the name of the field&lt;/li&gt;</span>
<span class="c"> *	  &lt;li&gt;required: boolean, the field cannot be null if true&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;className: CSS class name for the div wrapper (default &#39;inputEx-Field&#39;)&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;value: initial value&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;parentEl: HTMLElement or String id, append the field to this DOM element&lt;/li&gt;</span>
<span class="c"> * &lt;/ul&gt;</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">Field</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
	
	<span class="c">// Set the default values of the options</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">(</span><span class="nx">options</span> <span class="o">||</span> <span class="p">{});</span>
	
	<span class="c">// Call the render of the dom</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
	
	<span class="c">/**</span>
<span class="c">	 * Event fired after the user changed the value of the field.</span>
<span class="c">	 * @event updatedEvt</span>
<span class="c">	 * @param {Any} value The new value of the field</span>
<span class="c">	 * @desc YAHOO custom event fired when the field is &quot;updated&quot;&lt;br /&gt; subscribe with: this.updatedEvt.subscribe(function(e, params) { var value = params[0]; console.log(&quot;updated&quot;,value, this.updatedEvt); }, this, true);</span>
<span class="c">	 */</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">updatedEvt</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">util</span><span class="p">.</span><span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;updated&#39;</span><span class="o">,</span> <span class="k">this</span><span class="p">);</span>
	
	<span class="c">// initialize behaviour events</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">initEvents</span><span class="p">();</span>
	
	<span class="c">// Set the initial value</span>
	<span class="c">//   -&gt; no initial value = no style (setClassFromState called by setValue)</span>
	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">value</span><span class="o">,</span> <span class="kc">false</span><span class="p">);</span>
	<span class="p">}</span>
	
	<span class="c">// append it immediatly to the parent DOM element</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">)</span> <span class="p">{</span>
	   <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
	     <span class="nx">Dom</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">());</span>  
	   <span class="p">}</span>
	   <span class="k">else</span> <span class="p">{</span>
	      <span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">());</span>
      <span class="p">}</span>
	<span class="p">}</span>
<span class="p">};</span>


<span class="nx">inputEx</span><span class="p">.</span><span class="nx">Field</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  
   <span class="c">/**</span>
<span class="c">    * Set the default values of the options</span>
<span class="c">    * @param {Object} options Options object as passed to the constructor</span>
<span class="c">    */</span>
	<span class="nx">setOptions</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>

   	<span class="c">/**</span>
<span class="c">   	 * Configuration object to set the options for this class and the parent classes. See constructor details for options added by this class.</span>
<span class="c">   	 */</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{};</span>
   	
   	<span class="c">// Basic options</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">name</span><span class="o">;</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">value</span><span class="o">;</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">id</span> <span class="o">||</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">generateId</span><span class="p">();</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="kd">label</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="kd">label</span><span class="o">;</span>
   	<span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">description</span><span class="o">;</span>
   
      <span class="c">// Define default messages</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">messages</span> <span class="o">=</span> <span class="p">{};</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">required</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">messages</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">required</span> <span class="o">:</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">required</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">invalid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">messages</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">invalid</span><span class="p">)</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">invalid</span> <span class="o">:</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">invalid</span><span class="o">;</span>
	   <span class="c">//this.options.messages.valid = (options.messages &amp;&amp; options.messages.valid) ? options.messages.valid : inputEx.messages.valid;</span>
	
	   <span class="c">// Other options</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">className</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">className</span> <span class="o">:</span> <span class="s1">&#39;inputEx-Field&#39;</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">required</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">showMsg</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">showMsg</span><span class="p">)</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">showMsg</span><span class="o">;</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Default render of the dom element. Create a divEl that wraps the field.</span>
<span class="c">    */</span>
	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	
	   <span class="c">// Create a DIV element to wrap the editing el and the image</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-fieldWrapper&#39;</span><span class="p">});</span>
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">id</span><span class="o">;</span>
	   <span class="p">}</span>
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span> <span class="p">{</span>
	      <span class="nx">Dom</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span> <span class="s2">&quot;inputEx-required&quot;</span><span class="p">);</span>
	   <span class="p">}</span>
	   
	   <span class="c">// Label element</span>
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="kd">label</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelDiv</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;-label&#39;</span><span class="o">,</span> <span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-label&#39;</span><span class="o">,</span> <span class="s1">&#39;for&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;-field&#39;</span><span class="p">});</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelEl</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">);</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="kd">label</span><span class="p">)</span> <span class="p">);</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelDiv</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">labelEl</span><span class="p">);</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">labelDiv</span><span class="p">);</span>
      <span class="p">}</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">fieldContainer</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">className</span><span class="p">});</span> <span class="c">// for wrapping the field and description</span>
	
      <span class="c">// Render the component directly</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">renderComponent</span><span class="p">();</span>
      
      <span class="c">// Description</span>
      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">description</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">fieldContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;-desc&#39;</span><span class="o">,</span> <span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-description&#39;</span><span class="p">}</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">description</span><span class="p">));</span>
      <span class="p">}</span>
      
   	<span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fieldContainer</span><span class="p">);</span>
      
	   <span class="c">// Insert a float breaker</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span> <span class="p">{</span><span class="nx">clear</span><span class="o">:</span> <span class="s1">&#39;both&#39;</span><span class="p">}</span><span class="o">,</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="p">);</span>
	
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * Fire the &quot;updated&quot; event (only if the field validated)</span>
<span class="c">	 * Escape the stack using a setTimeout</span>
<span class="c">	 */</span>
	<span class="nx">fireUpdatedEvt</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c">// Uses setTimeout to escape the stack (that originiated in an event)</span>
      <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
      <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
         <span class="nx">that</span><span class="p">.</span><span class="nx">updatedEvt</span><span class="p">.</span><span class="nx">fire</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">getValue</span><span class="p">()</span><span class="o">,</span> <span class="nx">that</span><span class="p">);</span>
      <span class="p">}</span><span class="o">,</span><span class="mi">50</span><span class="p">);</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Render the interface component into this.divEl</span>
<span class="c">    */</span>
	<span class="nx">renderComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
 	   <span class="c">// override me</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * The default render creates a div to put in the messages</span>
<span class="c">    * @return {HTMLElement} divEl The main DIV wrapper</span>
<span class="c">    */</span>
	<span class="nx">getEl</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	   <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">;</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Initialize events of the Input</span>
<span class="c">    */</span>
	<span class="nx">initEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
 	   <span class="c">// override me</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Return the value of the input</span>
<span class="c">    * @return {Any} value of the field</span>
<span class="c">    */</span>
	<span class="nx">getValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
	   <span class="c">// override me</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Function to set the value</span>
<span class="c">    * @param {Any} value The new value</span>
<span class="c">    * @param {boolean} [sendUpdatedEvt] (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)</span>
<span class="c">    */</span>
	<span class="nx">setValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="o">,</span> <span class="nx">sendUpdatedEvt</span><span class="p">)</span> <span class="p">{</span>
	   <span class="c">// to be inherited</span>
	   
	   <span class="c">// set corresponding style</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">setClassFromState</span><span class="p">();</span>
	   
	   <span class="k">if</span><span class="p">(</span><span class="nx">sendUpdatedEvt</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
	      <span class="c">// fire update event</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">fireUpdatedEvt</span><span class="p">();</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Set the styles for valid/invalide state</span>
<span class="c">    */</span>
	<span class="nx">setClassFromState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">className</span><span class="o">;</span>
	   <span class="c">// remove previous class</span>
	   <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">previousState</span> <span class="p">)</span> <span class="p">{</span>
	      <span class="c">// remove invalid className for both required and invalid fields</span>
	      <span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;inputEx-&#39;</span><span class="o">+</span><span class="p">((</span><span class="k">this</span><span class="p">.</span><span class="nx">previousState</span> <span class="o">==</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateRequired</span><span class="p">)</span> <span class="o">?</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateInvalid</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">previousState</span><span class="p">);</span>
		   <span class="nx">Dom</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span> <span class="nx">className</span><span class="p">);</span>
	   <span class="p">}</span>
	   
	   <span class="c">// add new class</span>
	   <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getState</span><span class="p">();</span>
	   <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateEmpty</span> <span class="o">&amp;&amp;</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span> <span class="s1">&#39;inputEx-focused&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
	      <span class="c">// add invalid className for both required and invalid fields</span>
	      <span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;inputEx-&#39;</span><span class="o">+</span><span class="p">((</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateRequired</span><span class="p">)</span> <span class="o">?</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateInvalid</span> <span class="o">:</span> <span class="nx">state</span><span class="p">);</span>
	      <span class="nx">Dom</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span> <span class="nx">className</span> <span class="p">);</span>
      <span class="p">}</span>
	
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">showMsg</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">displayMessage</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">getStateString</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">);</span>
      <span class="p">}</span>
	   
	   <span class="k">this</span><span class="p">.</span><span class="nx">previousState</span> <span class="o">=</span> <span class="nx">state</span><span class="o">;</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Get the string for the given state</span>
<span class="c">    */</span>
	<span class="nx">getStateString</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateRequired</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">required</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateInvalid</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">invalid</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Returns the current state (given its value)</span>
<span class="c">    * @return {String} One of the following states: &#39;empty&#39;, &#39;required&#39;, &#39;valid&#39; or &#39;invalid&#39;</span>
<span class="c">    */</span>
	<span class="nx">getState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> 
	   <span class="c">// if the field is empty :</span>
	   <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
	      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span> <span class="o">?</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateRequired</span> <span class="o">:</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateEmpty</span><span class="o">;</span>
	   <span class="p">}</span>
	   <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">()</span> <span class="o">?</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateValid</span> <span class="o">:</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateInvalid</span><span class="o">;</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Validation of the field</span>
<span class="c">    * @return {Boolean} field validation status (true/false)</span>
<span class="c">    */</span>
	<span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Function called on the focus event</span>
<span class="c">    * @param {Event} e The original &#39;focus&#39; event</span>
<span class="c">    */</span>
	<span class="nx">onFocus</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	   <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">();</span>
	   <span class="nx">Dom</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">el</span><span class="o">,</span> <span class="s1">&#39;inputEx-empty&#39;</span><span class="p">);</span>
	   <span class="nx">Dom</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">el</span><span class="o">,</span> <span class="s1">&#39;inputEx-focused&#39;</span><span class="p">);</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Function called on the blur event</span>
<span class="c">    * @param {Event} e The original &#39;blur&#39; event</span>
<span class="c">    */</span>
	<span class="nx">onBlur</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	   <span class="nx">Dom</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">()</span><span class="o">,</span> <span class="s1">&#39;inputEx-focused&#39;</span><span class="p">);</span>
	   
	   <span class="c">// Call setClassFromState on Blur</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">setClassFromState</span><span class="p">();</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * onChange event handler</span>
<span class="c">    * @param {Event} e The original &#39;change&#39; event</span>
<span class="c">    */</span>
	<span class="nx">onChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">fireUpdatedEvt</span><span class="p">();</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Close the field and eventually opened popups...</span>
<span class="c">    */</span>
	<span class="nx">close</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Disable the field</span>
<span class="c">    */</span>
	<span class="nx">disable</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Enable the field</span>
<span class="c">    */</span>
	<span class="nx">enable</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Focus the field</span>
<span class="c">    */</span>
   <span class="nx">focus</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Purge all event listeners and remove the component from the dom</span>
<span class="c">    */</span>
   <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">();</span>
      
      <span class="c">// Unsubscribe all listeners on the updatedEvt</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">updatedEvt</span><span class="p">.</span><span class="nx">unsubscribeAll</span><span class="p">();</span>
      
      <span class="c">// Purge element (remove listeners on el and childNodes recursively)</span>
      <span class="nx">util</span><span class="p">.</span><span class="nx">Event</span><span class="p">.</span><span class="nx">purgeElement</span><span class="p">(</span><span class="nx">el</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
      
      <span class="c">// Remove from DOM</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">inDocument</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span> <span class="p">{</span>
         <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span>
      <span class="p">}</span>
      
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Update the message </span>
<span class="c">    * @param {String} msg Message to display</span>
<span class="c">    */</span>
   <span class="nx">displayMessage</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">fieldContainer</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="o">;</span> <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">msgEl</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">msgEl</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-message&#39;</span><span class="p">});</span>
          <span class="k">try</span><span class="p">{</span>
             <span class="kd">var</span> <span class="nx">divElements</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
             <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">msgEl</span><span class="o">,</span> <span class="nx">divElements</span><span class="p">[(</span><span class="nx">divElements</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span><span class="o">?</span><span class="nx">divElements</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">]);</span> <span class="c">//insertBefore the clear:both div</span>
          <span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">alert</span><span class="p">(</span><span class="nx">e</span><span class="p">);}</span>
      <span class="p">}</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">msgEl</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">msg</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Show the field</span>
<span class="c">    */</span>
   <span class="nx">show</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Hide the field</span>
<span class="c">    */</span>
   <span class="nx">hide</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Clear the field by setting the field value to this.options.value</span>
<span class="c">    * @param {boolean} [sendUpdatedEvt] (optional) Wether this clear should fire the updatedEvt or not (default is true, pass false to NOT send the event)</span>
<span class="c">    */</span>
   <span class="nx">clear</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sendUpdatedEvt</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">value</span><span class="o">,</span> <span class="nx">sendUpdatedEvt</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Should return true if empty</span>
<span class="c">    */</span>
   <span class="nx">isEmpty</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getValue</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

	<span class="c">/**</span>
<span class="c">	 * Set the parentField.</span>
<span class="c">	 * Generally use by composable fields (ie. Group,Form,ListField,CombineField,...}</span>
<span class="c">	 * @param {inputEx.Group|inputEx.Form|inputEx.ListField|inputEx.CombineField} parentField The parent field instance</span>
<span class="c">	 */</span>
	<span class="nx">setParentField</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">parentField</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">parentField</span> <span class="o">=</span> <span class="nx">parentField</span><span class="o">;</span>
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * Return the parent field instance</span>
<span class="c">	 * @return {inputEx.Group|inputEx.Form|inputEx.ListField|inputEx.CombineField}</span>
<span class="c">	 */</span>
	<span class="nx">getParentField</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parentField</span><span class="o">;</span>
	<span class="p">}</span>
   
<span class="p">};</span>

<span class="nx">inputEx</span><span class="p">.</span><span class="nx">Field</span><span class="p">.</span><span class="nx">groupOptions</span> <span class="o">=</span> <span class="p">[</span>
   <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s2">&quot;Label&quot;</span><span class="o">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;label&quot;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="p">}</span><span class="o">,</span>
   <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s2">&quot;Name&quot;</span><span class="o">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;name&quot;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="p">}</span><span class="o">,</span>
   <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s2">&quot;Description&quot;</span><span class="o">,</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;description&quot;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="p">}</span><span class="o">,</span>
   <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;boolean&quot;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s2">&quot;Required?&quot;</span><span class="o">,</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;required&quot;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span><span class="o">,</span>
   <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;boolean&quot;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s2">&quot;Show messages&quot;</span><span class="o">,</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;showMsg&quot;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span>
<span class="p">];</span>

<span class="p">})();</span>
</pre></div>
