<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

   <span class="kd">var</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">,</span> <span class="nx">Dom</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="o">,</span> <span class="nx">Event</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Event</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * Create a treeview to inspect a javascript object</span>
<span class="c"> * @class inputEx.widget.JsonTreeInspector</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param {String|HTMLElement} parentEl where to append the tree</span>
<span class="c"> * @param {Object} object the object to inspect</span>
<span class="c"> * @param {String} jsonPath JSON Path string (optional) (http://code.google.com/p/jsonpath/wiki/Javascript)</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">JsonTreeInspector</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">parentEl</span><span class="o">,</span> <span class="nx">object</span><span class="o">,</span> <span class="nx">jsonPath</span><span class="p">)</span> <span class="p">{</span>

   <span class="c">/**</span>
<span class="c">    * Hash to contain the values indexed by li ids</span>
<span class="c">    */</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="p">{};</span>
   
   <span class="c">/**</span>
<span class="c">    * Main div element</span>
<span class="c">    */</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
   
   <span class="k">this</span><span class="p">.</span><span class="nx">buildBranch</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">jsonPath</span><span class="p">)</span> <span class="o">?</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">JsonTreeInspector</span><span class="p">.</span><span class="nx">jsonPath</span><span class="p">(</span><span class="nx">object</span><span class="o">,</span><span class="nx">jsonPath</span><span class="p">)</span> <span class="o">:</span> <span class="nx">object</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
   
   <span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">parentEl</span><span class="p">)</span> <span class="o">?</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">parentEl</span><span class="p">)</span> <span class="o">:</span> <span class="nx">parentEl</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">JsonTreeInspector</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
   
   <span class="c">/**</span>
<span class="c">    * Destroy the widget</span>
<span class="c">    */</span>
   <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      
      <span class="c">// Remove from DOM</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">inDocument</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">))</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
      <span class="p">}</span>
      
      <span class="c">// recursively purge element</span>
      <span class="nx">Event</span><span class="p">.</span><span class="nx">purgeElement</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Build the sub-branch for obj</span>
<span class="c">    */</span>
   <span class="nx">buildBranch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="o">,</span><span class="nx">parentEl</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-JsonTreeInspector&#39;</span><span class="p">});</span>
      
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
            
            <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">generateId</span><span class="p">();</span>
            <span class="kd">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">}</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="nx">key</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">hash</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span> <span class="nx">value</span><span class="o">,</span> <span class="nx">expanded</span><span class="o">:</span> <span class="kc">false</span><span class="p">};</span>
            
            
            <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
                  <span class="nx">li</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s2">&quot;[ &quot;</span><span class="o">+</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="s2">&quot; element&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="s1">&#39;s&#39;</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;]&quot;</span> <span class="p">)</span> <span class="p">);</span>
               <span class="p">}</span>
               <span class="nx">Dom</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span><span class="s1">&#39;collapsed&#39;</span><span class="p">);</span>
               <span class="nx">Event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span> <span class="s1">&#39;click&#39;</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onItemClick</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
               <span class="kd">var</span> <span class="nx">spanContent</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
               <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
                  <span class="nx">spanContent</span> <span class="o">=</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">+</span><span class="nx">value</span><span class="o">+</span><span class="s1">&#39;&quot;&#39;</span><span class="o">;</span>
               <span class="p">}</span>
               <span class="k">else</span> <span class="p">{</span>
                  <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                     <span class="nx">spanContent</span> <span class="o">=</span> <span class="s2">&quot;null&quot;</span><span class="o">;</span>
                  <span class="p">}</span>
                  <span class="k">else</span> <span class="p">{</span>
                     <span class="nx">spanContent</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
                  <span class="p">}</span>
               <span class="p">}</span>
               <span class="nx">li</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;type-&#39;</span><span class="o">+</span><span class="p">(</span><span class="nx">value</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">?</span> <span class="s2">&quot;null&quot;</span> <span class="o">:</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span><span class="p">))}</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="nx">spanContent</span> <span class="p">)</span> <span class="p">);</span>
            <span class="p">}</span>
            
            
            <span class="nx">ul</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>
         <span class="p">}</span>
      <span class="p">}</span>
      
      <span class="nx">parentEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ul</span><span class="p">);</span>
      
      <span class="k">return</span> <span class="nx">ul</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   
   <span class="c">/**</span>
<span class="c">    * When the user click on a node</span>
<span class="c">    */</span>
   <span class="nx">onItemClick</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="o">,</span> <span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">Event</span><span class="p">.</span><span class="nx">stopEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">tgt</span> <span class="o">=</span> <span class="nx">Event</span><span class="p">.</span><span class="nx">getTarget</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      
      <span class="k">if</span><span class="p">(</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="nx">tgt</span><span class="o">,</span> <span class="s1">&#39;expanded&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="nx">tgt</span><span class="o">,</span> <span class="s1">&#39;collapsed&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">expandElement</span><span class="p">(</span><span class="nx">tgt</span><span class="p">);</span>
      <span class="p">}</span>
   <span class="p">}</span><span class="o">,</span>
   
   
   <span class="c">/**</span>
<span class="c">    * expand the node given the li element</span>
<span class="c">    */</span>
   <span class="nx">expandElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">li</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="kd">var</span> <span class="nx">isExpanded</span> <span class="o">=</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span> <span class="s1">&#39;expanded&#39;</span><span class="p">);</span>
      <span class="nx">Dom</span><span class="p">.</span><span class="nx">replaceClass</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span> <span class="nx">isExpanded</span> <span class="o">?</span> <span class="s1">&#39;expanded&#39;</span> <span class="o">:</span> <span class="s1">&#39;collapsed&#39;</span> <span class="o">,</span> <span class="nx">isExpanded</span> <span class="o">?</span> <span class="s1">&#39;collapsed&#39;</span><span class="o">:</span><span class="s1">&#39;expanded&#39;</span><span class="p">);</span>

      <span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">hash</span><span class="p">[</span><span class="nx">li</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span>

      <span class="k">if</span><span class="p">(</span><span class="nx">isExpanded</span><span class="p">)</span> <span class="p">{</span>
         <span class="c">// hide the sub-branch</span>
         <span class="nx">h</span><span class="p">.</span><span class="nx">expanded</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">expanded</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
            <span class="c">// generate the sub-branch</span>
            <span class="nx">h</span><span class="p">.</span><span class="nx">expanded</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">buildBranch</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">value</span><span class="o">,</span> <span class="nx">li</span><span class="p">);</span>
         <span class="p">}</span>
         <span class="c">// show the sub-branch</span>
         <span class="nx">h</span><span class="p">.</span><span class="nx">expanded</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
      <span class="p">}</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Expand a branch given a li element</span>
<span class="c">    * @param {HTMLElement} li </span>
<span class="c">    * @param {Integer} maxLevel</span>
<span class="c">    */</span>
   <span class="nx">expandBranch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span><span class="nx">maxLevel</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">expandElement</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">sub</span> <span class="o">=</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">getChildrenBy</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">==</span> <span class="s2">&quot;UL&quot;</span><span class="o">;</span><span class="p">})[</span><span class="mi">0</span><span class="p">].</span><span class="nx">childNodes</span><span class="o">;</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">sub</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">sub</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
         <span class="k">if</span><span class="p">(</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="nx">s</span><span class="o">,</span><span class="s2">&quot;collapsed&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">maxLevel</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">expandBranch</span><span class="p">(</span><span class="nx">s</span><span class="o">,</span><span class="nx">maxLevel</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
         <span class="p">}</span>
      <span class="p">}</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Expand the root node</span>
<span class="c">    * @param {Integer} maxLevel</span>
<span class="c">    */</span>
   <span class="nx">expandAll</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">maxLevel</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
      <span class="kd">var</span> <span class="nx">liEls</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">childNodes</span><span class="o">;</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">liEls</span><span class="p">.</span><span class="nx">length</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">liEls</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">expandBranch</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span><span class="nx">maxLevel</span><span class="p">);</span>
      <span class="p">}</span>
   <span class="p">}</span>
   
<span class="p">};</span>

<span class="c">/**</span>
<span class="c"> * JSONPath 0.8.0 - XPath for JSON</span>
<span class="c"> * http://code.google.com/p/jsonpath/</span>
<span class="c"> * http://code.google.com/p/jsonpath/wiki/Javascript</span>
<span class="c"> *</span>
<span class="c"> * Copyright (c) 2007 Stefan Goessner (goessner.net)</span>
<span class="c"> * Licensed under the MIT (MIT-LICENSE.txt) licence.</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">JsonTreeInspector</span><span class="p">.</span><span class="nx">jsonPath</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="o">,</span> <span class="nx">expr</span><span class="o">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">P</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nx">resultType</span><span class="o">:</span> <span class="nx">arg</span> <span class="o">&amp;&amp;</span> <span class="nx">arg</span><span class="p">.</span><span class="nx">resultType</span> <span class="o">||</span> <span class="s2">&quot;VALUE&quot;</span><span class="o">,</span>
      <span class="nx">result</span><span class="o">:</span> <span class="p">[]</span><span class="o">,</span>
      <span class="nx">normalize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">expr</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">var</span> <span class="nx">subx</span> <span class="o">=</span> <span class="p">[];</span>
         <span class="k">return</span> <span class="nx">expr</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\[&#39;](\??\(.*?\))[\]&#39;]/g</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$0</span><span class="o">,</span><span class="nx">$1</span><span class="p">){</span><span class="k">return</span> <span class="s2">&quot;[#&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">subx</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$1</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="o">;</span><span class="p">})</span>
                    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&#39;?\.&#39;?|\[&#39;?/g</span><span class="o">,</span> <span class="s2">&quot;;&quot;</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/;;;|;;/g</span><span class="o">,</span> <span class="s2">&quot;;..;&quot;</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/;$|&#39;?\]|&#39;$/g</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/#([0-9]+)/g</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$0</span><span class="o">,</span><span class="nx">$1</span><span class="p">){</span><span class="k">return</span> <span class="nx">subx</span><span class="p">[</span><span class="nx">$1</span><span class="p">];});</span>
      <span class="p">}</span><span class="o">,</span>
      <span class="nx">asPath</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">)</span><span class="o">,</span> <span class="nx">p</span> <span class="o">=</span> <span class="s2">&quot;$&quot;</span><span class="o">;</span>
         <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">x</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
            <span class="nx">p</span> <span class="o">+=</span> <span class="sr">/^[0-9*]+$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">x</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">?</span> <span class="p">(</span><span class="s2">&quot;[&quot;</span><span class="o">+</span><span class="nx">x</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="s2">&quot;[&#39;&quot;</span><span class="o">+</span><span class="nx">x</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;&#39;]&quot;</span><span class="p">);</span>
         <span class="k">return</span> <span class="nx">p</span><span class="o">;</span>
      <span class="p">}</span><span class="o">,</span>
      <span class="nx">store</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="o">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="nx">P</span><span class="p">.</span><span class="nx">result</span><span class="p">[</span><span class="nx">P</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">P</span><span class="p">.</span><span class="nx">resultType</span> <span class="o">==</span> <span class="s2">&quot;PATH&quot;</span> <span class="o">?</span> <span class="nx">P</span><span class="p">.</span><span class="nx">asPath</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="o">:</span> <span class="nx">v</span><span class="o">;</span>
         <span class="k">return</span> <span class="o">!!</span><span class="nx">p</span><span class="o">;</span>
      <span class="p">}</span><span class="o">,</span>
      <span class="nx">trace</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">expr</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="nx">expr</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">expr</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">)</span><span class="o">,</span> <span class="nx">loc</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
            <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">&amp;&amp;</span> <span class="nx">val</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">loc</span><span class="p">))</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="p">[</span><span class="nx">loc</span><span class="p">]</span><span class="o">,</span> <span class="nx">path</span> <span class="o">+</span> <span class="s2">&quot;;&quot;</span> <span class="o">+</span> <span class="nx">loc</span><span class="p">);</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">loc</span> <span class="o">===</span> <span class="s2">&quot;*&quot;</span><span class="p">)</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">loc</span><span class="o">,</span> <span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="o">,</span><span class="nx">l</span><span class="o">,</span><span class="nx">x</span><span class="o">,</span><span class="nx">v</span><span class="o">,</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span> <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="s2">&quot;;&quot;</span><span class="o">+</span><span class="nx">x</span><span class="o">,</span><span class="nx">v</span><span class="o">,</span><span class="nx">p</span><span class="p">);</span> <span class="p">});</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">loc</span> <span class="o">===</span> <span class="s2">&quot;..&quot;</span><span class="p">)</span> <span class="p">{</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">);</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">loc</span><span class="o">,</span> <span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="o">,</span><span class="nx">l</span><span class="o">,</span><span class="nx">x</span><span class="o">,</span><span class="nx">v</span><span class="o">,</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span> <span class="k">typeof</span> <span class="nx">v</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="s2">&quot;..;&quot;</span><span class="o">+</span><span class="nx">x</span><span class="o">,</span><span class="nx">v</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">,</span><span class="nx">p</span><span class="o">+</span><span class="s2">&quot;;&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">);</span> <span class="p">});</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="sr">/,/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">loc</span><span class="p">))</span> <span class="p">{</span> <span class="c">// [name1,name2,...]</span>
               <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">loc</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/&#39;?,&#39;?/</span><span class="p">)</span><span class="o">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
                  <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;;&quot;</span><span class="o">+</span><span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="sr">/^\(.*?\)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">loc</span><span class="p">))</span> <span class="c">// [(expr)]</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">P</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">loc</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">+</span><span class="s2">&quot;;&quot;</span><span class="o">+</span><span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">);</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="sr">/^\?\(.*?\)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">loc</span><span class="p">))</span> <span class="c">// [?(expr)]</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">loc</span><span class="o">,</span> <span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="o">,</span><span class="nx">l</span><span class="o">,</span><span class="nx">x</span><span class="o">,</span><span class="nx">v</span><span class="o">,</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">P</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\?\((.*?)\)$/</span><span class="o">,</span><span class="s2">&quot;$1&quot;</span><span class="p">)</span><span class="o">,</span><span class="nx">v</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">,</span><span class="nx">m</span><span class="p">))</span> <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="s2">&quot;;&quot;</span><span class="o">+</span><span class="nx">x</span><span class="o">,</span><span class="nx">v</span><span class="o">,</span><span class="nx">p</span><span class="p">);</span> <span class="p">});</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="sr">/^(-?[0-9]*):(-?[0-9]*):?([0-9]*)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">loc</span><span class="p">))</span> <span class="c">// [start:end:step]  phyton slice syntax</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">loc</span><span class="o">,</span> <span class="nx">x</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">);</span>
         <span class="p">}</span>
         <span class="k">else</span>
            <span class="nx">P</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="nx">path</span><span class="o">,</span> <span class="nx">val</span><span class="p">);</span>
      <span class="p">}</span><span class="o">,</span>
      <span class="nx">walk</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">loc</span><span class="o">,</span> <span class="nx">expr</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="o">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">val</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
               <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">val</span><span class="p">)</span>
                  <span class="nx">f</span><span class="p">(</span><span class="nx">i</span><span class="o">,</span><span class="nx">loc</span><span class="o">,</span><span class="nx">expr</span><span class="o">,</span><span class="nx">val</span><span class="o">,</span><span class="nx">path</span><span class="p">);</span>
         <span class="p">}</span>
         <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">m</span> <span class="k">in</span> <span class="nx">val</span><span class="p">)</span>
               <span class="k">if</span> <span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">m</span><span class="p">))</span>
                  <span class="nx">f</span><span class="p">(</span><span class="nx">m</span><span class="o">,</span><span class="nx">loc</span><span class="o">,</span><span class="nx">expr</span><span class="o">,</span><span class="nx">val</span><span class="o">,</span><span class="nx">path</span><span class="p">);</span>
         <span class="p">}</span>
      <span class="p">}</span><span class="o">,</span>
      <span class="nx">slice</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">loc</span><span class="o">,</span> <span class="nx">expr</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">len</span><span class="o">=</span><span class="nx">val</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span> <span class="nx">start</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="nx">end</span><span class="o">=</span><span class="nx">len</span><span class="o">,</span> <span class="nx">step</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
            <span class="nx">loc</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^(-?[0-9]*):(-?[0-9]*):?(-?[0-9]*)$/g</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$0</span><span class="o">,</span><span class="nx">$1</span><span class="o">,</span><span class="nx">$2</span><span class="o">,</span><span class="nx">$3</span><span class="p">){</span><span class="nx">start</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">$1</span><span class="o">||</span><span class="nx">start</span><span class="p">);</span><span class="nx">end</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">$2</span><span class="o">||</span><span class="nx">end</span><span class="p">);</span><span class="nx">step</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">$3</span><span class="o">||</span><span class="nx">step</span><span class="p">);});</span>
            <span class="nx">start</span> <span class="o">=</span> <span class="p">(</span><span class="nx">start</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span><span class="nx">start</span><span class="o">+</span><span class="nx">len</span><span class="p">)</span> <span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">len</span><span class="o">,</span><span class="nx">start</span><span class="p">);</span>
            <span class="nx">end</span>   <span class="o">=</span> <span class="p">(</span><span class="nx">end</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>   <span class="o">?</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span><span class="nx">end</span><span class="o">+</span><span class="nx">len</span><span class="p">)</span>   <span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">len</span><span class="o">,</span><span class="nx">end</span><span class="p">);</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">start</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">end</span><span class="o">;</span> <span class="nx">i</span><span class="o">+=</span><span class="nx">step</span><span class="p">)</span>
               <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="s2">&quot;;&quot;</span><span class="o">+</span><span class="nx">expr</span><span class="o">,</span> <span class="nx">val</span><span class="o">,</span> <span class="nx">path</span><span class="p">);</span>
         <span class="p">}</span>
      <span class="p">}</span><span class="o">,</span>
      <span class="nb">eval</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">_v</span><span class="o">,</span> <span class="nx">_vname</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">try</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">$</span> <span class="o">&amp;&amp;</span> <span class="nx">_v</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@/g</span><span class="o">,</span> <span class="s2">&quot;_v&quot;</span><span class="p">));</span> <span class="p">}</span>
         <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nx">SyntaxError</span><span class="p">(</span><span class="s2">&quot;jsonPath: &quot;</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">message</span> <span class="o">+</span> <span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="nx">x</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@/g</span><span class="o">,</span> <span class="s2">&quot;_v&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\^/g</span><span class="o">,</span> <span class="s2">&quot;_a&quot;</span><span class="p">));</span> <span class="p">}</span>
      <span class="p">}</span>
   <span class="p">};</span>

   <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">obj</span><span class="o">;</span>
   <span class="k">if</span> <span class="p">(</span><span class="nx">expr</span> <span class="o">&amp;&amp;</span> <span class="nx">obj</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">P</span><span class="p">.</span><span class="nx">resultType</span> <span class="o">==</span> <span class="s2">&quot;VALUE&quot;</span> <span class="o">||</span> <span class="nx">P</span><span class="p">.</span><span class="nx">resultType</span> <span class="o">==</span> <span class="s2">&quot;PATH&quot;</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">P</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="nx">P</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(</span><span class="nx">expr</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\$;/</span><span class="o">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">,</span> <span class="nx">obj</span><span class="o">,</span> <span class="s2">&quot;$&quot;</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">P</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="nx">P</span><span class="p">.</span><span class="nx">result</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
   <span class="p">}</span>
<span class="p">};</span>

<span class="p">})();</span>
</pre></div>
