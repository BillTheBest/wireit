<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

   <span class="kd">var</span> <span class="nx">DD</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">DragDropMgr</span><span class="o">,</span> <span class="nx">Dom</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="o">,</span> <span class="nx">Event</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Event</span><span class="o">,</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">;</span>
   
<span class="c">/**</span>
<span class="c"> * DDProxy for DDList items (used by DDList)</span>
<span class="c"> * @class inputEx.widget.DDListItem</span>
<span class="c"> * @extends YAHOO.util.DDProxy</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param {String} id</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">DDListItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">DDListItem</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">id</span><span class="p">);</span>

    <span class="c">// Prevent lateral draggability</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setXConstraint</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="p">);</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">goingUp</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">lastY</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="p">};</span>

<span class="nx">YAHOO</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">DDListItem</span><span class="o">,</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">DDProxy</span><span class="o">,</span> <span class="p">{</span>

   <span class="c">/**</span>
<span class="c">    * Create the proxy element</span>
<span class="c">    */</span>
   <span class="nx">startDrag</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="c">// make the proxy look like the source element</span>
        <span class="kd">var</span> <span class="nx">dragEl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getDragEl</span><span class="p">();</span>
        <span class="kd">var</span> <span class="nx">clickEl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">();</span>
        <span class="nx">Dom</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">clickEl</span><span class="o">,</span> <span class="s2">&quot;visibility&quot;</span><span class="o">,</span> <span class="s2">&quot;hidden&quot;</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_originalIndex</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">clickEl</span> <span class="o">,</span><span class="nx">clickEl</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">);</span>
        <span class="nx">dragEl</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="nx">clickEl</span><span class="p">.</span><span class="nx">className</span><span class="o">;</span>
        <span class="nx">dragEl</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">clickEl</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * Handle the endDrag and eventually fire the listReordered event</span>
<span class="c">     */</span>
    <span class="nx">endDrag</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">Dom</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">,</span> <span class="s2">&quot;visibility&quot;</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
        
        <span class="c">// Fire the reordered event if position in list has changed</span>
        <span class="kd">var</span> <span class="nx">clickEl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">();</span>
        <span class="kd">var</span> <span class="nx">newIndex</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">clickEl</span> <span class="o">,</span><span class="nx">clickEl</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_originalIndex</span> <span class="o">!=</span> <span class="nx">newIndex</span><span class="p">)</span> <span class="p">{</span>
           <span class="k">this</span><span class="p">.</span><span class="nx">_list</span><span class="p">.</span><span class="nx">onReordered</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_originalIndex</span><span class="o">,</span> <span class="nx">newIndex</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @method onDragDrop</span>
<span class="c">     */</span>
    <span class="nx">onDragDrop</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="o">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>

        <span class="c">// If there is one drop interaction, the li was dropped either on the list,</span>
        <span class="c">// or it was dropped on the current location of the source element.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">DD</span><span class="p">.</span><span class="nx">interactionInfo</span><span class="p">.</span><span class="nx">drop</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>

            <span class="c">// The position of the cursor at the time of the drop (YAHOO.util.Point)</span>
            <span class="kd">var</span> <span class="nx">pt</span> <span class="o">=</span> <span class="nx">DD</span><span class="p">.</span><span class="nx">interactionInfo</span><span class="p">.</span><span class="nx">point</span><span class="o">;</span> 

            <span class="c">// The region occupied by the source element at the time of the drop</span>
            <span class="kd">var</span> <span class="nx">region</span> <span class="o">=</span> <span class="nx">DD</span><span class="p">.</span><span class="nx">interactionInfo</span><span class="p">.</span><span class="nx">sourceRegion</span><span class="o">;</span> 

            <span class="c">// Check to see if we are over the source element&#39;s location.  We will</span>
            <span class="c">// append to the bottom of the list once we are sure it was a drop in</span>
            <span class="c">// the negative space (the area of the list without any list items)</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">region</span><span class="p">.</span><span class="nx">intersect</span><span class="p">(</span><span class="nx">pt</span><span class="p">))</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">destEl</span> <span class="o">=</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">destEl</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">!=</span> <span class="s2">&quot;li&quot;</span><span class="p">)</span> <span class="p">{</span>
                   <span class="kd">var</span> <span class="nx">destDD</span> <span class="o">=</span> <span class="nx">DD</span><span class="p">.</span><span class="nx">getDDById</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
                   <span class="nx">destEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">());</span>
                   <span class="nx">destDD</span><span class="p">.</span><span class="nx">isEmpty</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                   <span class="nx">DD</span><span class="p">.</span><span class="nx">refreshCache</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * Keep track of the direction of the drag for use during onDragOver</span>
<span class="c">     */</span>
    <span class="nx">onDrag</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">Event</span><span class="p">.</span><span class="nx">getPageY</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastY</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">goingUp</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastY</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">goingUp</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">lastY</span> <span class="o">=</span> <span class="nx">y</span><span class="o">;</span>
    <span class="p">}</span><span class="o">,</span>

    <span class="c">/**</span>
<span class="c">     * @method onDragOver</span>
<span class="c">     */</span>
    <span class="nx">onDragOver</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="o">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    
        <span class="kd">var</span> <span class="nx">srcEl</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getEl</span><span class="p">();</span>
        <span class="kd">var</span> <span class="nx">destEl</span> <span class="o">=</span> <span class="nx">Dom</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>

        <span class="c">// We are only concerned with list items, we ignore the dragover</span>
        <span class="c">// notifications for the list.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">destEl</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">==</span> <span class="s2">&quot;li&quot;</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">orig_p</span> <span class="o">=</span> <span class="nx">srcEl</span><span class="p">.</span><span class="nx">parentNode</span><span class="o">;</span>
            <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">destEl</span><span class="p">.</span><span class="nx">parentNode</span><span class="o">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">goingUp</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">p</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">srcEl</span><span class="o">,</span> <span class="nx">destEl</span><span class="p">);</span> <span class="c">// insert above</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">p</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">srcEl</span><span class="o">,</span> <span class="nx">destEl</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">);</span> <span class="c">// insert below</span>
            <span class="p">}</span>

            <span class="nx">DD</span><span class="p">.</span><span class="nx">refreshCache</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">});</span>


<span class="c">/**</span>
<span class="c"> * Create a sortable list </span>
<span class="c"> * @class inputEx.widget.DDList</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param {Object} options Options:</span>
<span class="c"> * &lt;ul&gt;</span>
<span class="c"> *	   &lt;li&gt;id: id of the ul element&lt;/li&gt;</span>
<span class="c"> *	   &lt;li&gt;value: initial value of the list&lt;/li&gt;</span>
<span class="c"> * &lt;/ul&gt;</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">DDList</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
   
   <span class="k">this</span><span class="p">.</span><span class="nx">ul</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">);</span>
   
   <span class="k">this</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">[];</span>
   
   <span class="k">this</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>

   <span class="c">/**</span>
<span class="c">	 * @event YAHOO custom event fired when an item is removed</span>
<span class="c">	 * @param {Any} itemValue value of the removed item</span>
<span class="c">	 */</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">itemRemovedEvt</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;itemRemoved&#39;</span><span class="o">,</span> <span class="k">this</span><span class="p">);</span>
	
	<span class="c">/**</span>
<span class="c">	 * @event YAHOO custom event fired when the list is reordered</span>
<span class="c">	 */</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">listReorderedEvt</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">CustomEvent</span><span class="p">(</span><span class="s1">&#39;listReordered&#39;</span><span class="o">,</span> <span class="k">this</span><span class="p">);</span>
   

   <span class="c">// append it immediatly to the parent DOM element</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">)</span> <span class="p">{</span>
	   <span class="k">if</span><span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
	     <span class="nx">Dom</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">);</span>  
	   <span class="p">}</span>
	   <span class="k">else</span> <span class="p">{</span>
	      <span class="nx">options</span><span class="p">.</span><span class="nx">parentEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">);</span>
      <span class="p">}</span>
	<span class="p">}</span>
	
<span class="p">};</span>

<span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">DDList</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
	
   <span class="c">/**</span>
<span class="c">    * Set the options </span>
<span class="c">    */</span>
   <span class="nx">setOptions</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
	   	<span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{};</span>
   		<span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">allowDelete</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">allowDelete</span><span class="p">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">allowDelete</span><span class="o">;</span> 
	
		   <span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
		      <span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">id</span><span class="o">;</span>
		   <span class="p">}</span>

		   <span class="k">if</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
		      <span class="k">this</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
		   <span class="p">}</span>

   <span class="p">}</span><span class="o">,</span>	

   <span class="c">/**</span>
<span class="c">    * Add an item to the list</span>
<span class="c">    * @param {String|Object} item Either a string with the given value or an object with &quot;label&quot; and &quot;value&quot; attributes</span>
<span class="c">    */</span>
   <span class="nx">addItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-DDList-item&#39;</span><span class="p">});</span>
      <span class="nx">li</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">item</span> <span class="o">==</span> <span class="s2">&quot;object&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">item</span><span class="p">.</span><span class="kd">label</span> <span class="o">:</span> <span class="nx">item</span><span class="p">)</span> <span class="p">);</span>

      <span class="c">// Option for the &quot;remove&quot; link (default: true)</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!!</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">allowDelete</span><span class="p">){</span>
			<span class="kd">var</span> <span class="nx">removeLink</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s2">&quot;remove&quot;</span><span class="p">);</span> 
	      <span class="nx">li</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">removeLink</span> <span class="p">);</span>
	      <span class="nx">Event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">removeLink</span><span class="o">,</span> <span class="s1">&#39;click&#39;</span><span class="o">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	         <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">Event</span><span class="p">.</span><span class="nx">getTarget</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
	         <span class="kd">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">parentNode</span><span class="o">;</span>
	         <span class="k">this</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">li</span><span class="o">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)</span> <span class="p">);</span>
	      <span class="p">}</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="kd">var</span> <span class="nx">dditem</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">widget</span><span class="p">.</span><span class="nx">DDListItem</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>
      <span class="nx">dditem</span><span class="p">.</span><span class="nx">_list</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">item</span> <span class="o">==</span> <span class="s2">&quot;object&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">item</span><span class="p">.</span><span class="nx">value</span> <span class="o">:</span> <span class="nx">item</span> <span class="p">);</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * private method to remove an item</span>
<span class="c">    * @param {Integer} index index of item to be removed</span>
<span class="c">    * @private</span>
<span class="c">    */</span>
   <span class="nx">_removeItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="kd">var</span> <span class="nx">itemValue</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
   
      <span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">compactArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
      
      <span class="k">return</span> <span class="nx">itemValue</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Method to remove an item (_removeItem function + event firing)</span>
<span class="c">    * @param {Integer} index Item index</span>
<span class="c">    */</span>
   <span class="nx">removeItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">itemValue</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_removeItem</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
      
      <span class="c">// Fire the itemRemoved Event</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">itemRemovedEvt</span><span class="p">.</span><span class="nx">fire</span><span class="p">(</span><span class="nx">itemValue</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Called by the DDListItem when an item as been moved</span>
<span class="c">    */</span>
   <span class="nx">onReordered</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">originalIndex</span><span class="o">,</span> <span class="nx">newIndex</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">originalIndex</span> <span class="o">&lt;</span> <span class="nx">newIndex</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">newIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">originalIndex</span><span class="p">]);</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">originalIndex</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">newIndex</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">originalIndex</span><span class="p">]);</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">originalIndex</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
      <span class="p">}</span>      
      <span class="k">this</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">compactArray</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">listReorderedEvt</span><span class="p">.</span><span class="nx">fire</span><span class="p">();</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Return the current value of the field</span>
<span class="c">    * @return {Array} array of values</span>
<span class="c">    */</span>
   <span class="nx">getValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Update the value of a given item</span>
<span class="c">    * @param {Integer} index Item index</span>
<span class="c">    * @param {Any} value New value</span>
<span class="c">    */</span>
   <span class="nx">updateItem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="o">,</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="o">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">childNodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">value</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
   
   <span class="c">/**</span>
<span class="c">    * Set the value of the list</span>
<span class="c">    * @param {Array} value list of values</span>
<span class="c">    */</span>
   <span class="nx">setValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="c">// if trying to set wrong value (or &quot;&quot;), reset</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
         <span class="nx">value</span> <span class="o">=</span> <span class="p">[];</span>
      <span class="p">}</span>
      
      <span class="kd">var</span> <span class="nx">oldNb</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">ul</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
      <span class="kd">var</span> <span class="nx">newNb</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
      
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">newNb</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">oldNb</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">updateItem</span><span class="p">(</span><span class="nx">i</span><span class="o">,</span> <span class="nx">value</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
         <span class="p">}</span>
         <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">addItem</span><span class="p">(</span><span class="nx">value</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
         <span class="p">}</span>
      <span class="p">}</span>
      
      <span class="c">// remove extra li items if any</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">newNb</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">oldNb</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">_removeItem</span><span class="p">(</span><span class="nx">newNb</span><span class="p">);</span> <span class="c">// newNb is always the index of first li to remove (not j !)</span>
      <span class="p">}</span>
   <span class="p">}</span>
   
<span class="p">};</span>


<span class="p">})();</span>
</pre></div>
