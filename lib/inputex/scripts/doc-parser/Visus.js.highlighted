<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   
   <span class="kd">var</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">;</span>
<span class="c">/**</span>
<span class="c"> * Contains the various visualization methods</span>
<span class="c"> * @class inputEx.visus</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">visus</span> <span class="o">=</span> <span class="p">{</span>
  
  <span class="c">/**</span>
<span class="c">   * Use the trimpath-template engine</span>
<span class="c">   * see http://code.google.com/p/trimpath/wiki/JavaScriptTemplates for syntax</span>
<span class="c">   * options = {visuType: &#39;trimpath&#39;, template: &quot;String template&quot;}</span>
<span class="c">   */</span>
  <span class="nx">trimpath</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">TrimPath</span><span class="p">)</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;TrimPath is not on the page. Please load inputex/lib/trimpath-template.js&#39;</span><span class="p">);</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="p">}</span>
      <span class="kd">var</span> <span class="nx">tpl</span> <span class="o">=</span> <span class="nx">TrimPath</span><span class="p">.</span><span class="nx">parseTemplate</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">template</span><span class="p">);</span>
     	<span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">tpl</span><span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
     	<span class="k">return</span> <span class="nx">ret</span><span class="o">;</span>
  <span class="p">}</span><span class="o">,</span>
  
  <span class="c">/**</span>
<span class="c">   * Use a rendering function</span>
<span class="c">   * options = {visuType: &#39;func&#39;, func: function(data) { ...code here...} }</span>
<span class="c">   * @method func</span>
<span class="c">   */</span>
  <span class="s2">&quot;func&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nx">options</span><span class="p">.</span><span class="nx">func</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span><span class="o">,</span>
  
  <span class="c">/**</span>
<span class="c">   * Use YAHOO.lang.dump</span>
<span class="c">   * options = {visuType: &#39;dump&#39;}</span>
<span class="c">   */</span>
  <span class="nx">dump</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="o">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">dump</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span>
   
<span class="p">};</span>

<span class="c">/**</span>
<span class="c"> * Render &#39;data&#39; using a visualization function described by &#39;visuOptions&#39;</span>
<span class="c"> * @static</span>
<span class="c"> * @param {Object} visuOptions The visu parameters object with: visuType: &#39;myType&#39;, ...args...</span>
<span class="c"> * @param {Object} data The input data to send to the template</span>
<span class="c"> * @param {HTMLElement || String} parentEl optional Set the result as content of parentEl</span>
<span class="c"> * @return {HTMLElement || String} Either the inserted HTMLElement or the String set to parentEl.innerHTML</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">renderVisu</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">visuOptions</span><span class="o">,</span><span class="nx">data</span><span class="o">,</span> <span class="nx">parentEl</span><span class="p">)</span> <span class="p">{</span>
   
   <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="nx">visuOptions</span> <span class="o">||</span> <span class="p">{};</span>
   <span class="kd">var</span> <span class="nx">visuType</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">visuType</span> <span class="o">||</span> <span class="s1">&#39;dump&#39;</span><span class="o">;</span>
   
   <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">visus</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">visuType</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;inputEx: no visu for visuType: &quot;</span><span class="o">+</span><span class="nx">visuType</span><span class="p">);</span>
   <span class="p">}</span>
   
   <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">visus</span><span class="p">[</span><span class="nx">visuType</span><span class="p">];</span>
   <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;inputEx: no visu for visuType: &quot;</span><span class="o">+</span><span class="nx">visuType</span><span class="p">);</span>
   <span class="p">}</span>
   
   <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
   <span class="k">try</span> <span class="p">{</span>
      <span class="nx">v</span> <span class="o">=</span> <span class="nx">f</span><span class="p">(</span><span class="nx">opts</span><span class="o">,</span><span class="nx">data</span><span class="p">);</span>
   <span class="p">}</span>
   <span class="k">catch</span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;inputEx: error while running visu &quot;</span><span class="o">+</span><span class="nx">visuType</span><span class="o">+</span><span class="s2">&quot; : &quot;</span><span class="o">+</span><span class="nx">ex</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
   <span class="p">}</span>
   
   <span class="c">// Get the node</span>
   <span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
   <span class="k">if</span><span class="p">(</span><span class="nx">parentEl</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="nx">parentEl</span><span class="p">))</span> <span class="p">{</span>
         <span class="nx">node</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">parentEl</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="nx">node</span> <span class="o">=</span> <span class="nx">parentEl</span><span class="o">;</span>
      <span class="p">}</span>
   <span class="p">}</span>
   
   <span class="c">// Insert it</span>
   <span class="k">if</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">v</span><span class="p">.</span><span class="nx">tagName</span> <span class="p">)</span> <span class="p">{</span>
         <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
         <span class="nx">node</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
      <span class="p">}</span>
   <span class="p">}</span>
   
   <span class="k">return</span> <span class="nx">v</span><span class="o">;</span>
<span class="p">};</span>

<span class="p">})();</span>
</pre></div>
