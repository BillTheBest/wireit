<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

   <span class="kd">var</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">,</span> <span class="nx">Event</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Event</span><span class="o">,</span> <span class="nx">Dom</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * Basic string field (equivalent to the input type &quot;text&quot;)</span>
<span class="c"> * @class inputEx.StringField</span>
<span class="c"> * @extends inputEx.Field</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param {Object} options Added options:</span>
<span class="c"> * &lt;ul&gt;</span>
<span class="c"> *	  &lt;li&gt;regexp: regular expression used to validate (otherwise it always validate)&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;size: size attribute of the input&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;maxLength: maximum size of the string field (no message display, uses the maxlength html attribute)&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;minLength: minimum size of the string field (will display an error message if shorter)&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;typeInvite: string displayed when the field is empty&lt;/li&gt;</span>
<span class="c"> *   &lt;li&gt;readonly: set the field as readonly&lt;/li&gt;</span>
<span class="c"> * &lt;/ul&gt;</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">options</span><span class="p">);</span>

	  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span><span class="p">)</span> <span class="p">{</span>
	     <span class="k">this</span><span class="p">.</span><span class="nx">updateTypeInvite</span><span class="p">();</span>
	  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">lang</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="o">,</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">Field</span><span class="o">,</span> <span class="p">{</span>
   <span class="c">/**</span>
<span class="c">    * Set the default values of the options</span>
<span class="c">    * @param {Object} options Options object as passed to the constructor</span>
<span class="c">    */</span>
	<span class="nx">setOptions</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
	   <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">options</span><span class="p">);</span>

	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">regexp</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">regexp</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">size</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">maxLength</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">maxLength</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">minLength</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">minLength</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">readonly</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">readonly</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">autocomplete</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">autocomplete</span> <span class="o">===</span> <span class="kc">false</span> <span class="o">||</span> <span class="nx">options</span><span class="p">.</span><span class="nx">autocomplete</span> <span class="o">===</span> <span class="s2">&quot;off&quot;</span><span class="p">)</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="kc">true</span><span class="o">;</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">trim</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">trim</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>


   <span class="c">/**</span>
<span class="c">    * Render an &#39;INPUT&#39; DOM node</span>
<span class="c">    */</span>
   <span class="nx">renderComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

      <span class="c">// This element wraps the input node in a float: none div</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">wrapEl</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-StringField-wrapper&#39;</span><span class="p">});</span>

      <span class="c">// Attributes of the input field</span>
      <span class="kd">var</span> <span class="nx">attributes</span> <span class="o">=</span> <span class="p">{};</span>
      <span class="nx">attributes</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text&#39;</span><span class="o">;</span>
      <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;-field&#39;</span><span class="o">:</span><span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">generateId</span><span class="p">();</span>
      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">size</span><span class="o">;</span> <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">name</span><span class="o">;</span> <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">readonly</span><span class="p">)</span> <span class="p">{</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">readonly</span> <span class="o">=</span> <span class="s1">&#39;readonly&#39;</span><span class="o">;</span> <span class="p">}</span>

      <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">maxLength</span><span class="p">)</span> <span class="p">{</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">maxLength</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">maxLength</span><span class="o">;</span> <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">autocomplete</span> <span class="o">=</span> <span class="s1">&#39;off&#39;</span><span class="o">;</span> <span class="p">}</span>

      <span class="c">// Create the node</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="o">,</span> <span class="nx">attributes</span><span class="p">);</span>

      <span class="c">// Append it to the main element</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">wrapEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">fieldContainer</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapEl</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Register the change, focus and blur events</span>
<span class="c">    */</span>
   <span class="nx">initEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	   <span class="nx">Event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">,</span> <span class="s2">&quot;change&quot;</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>

       <span class="k">if</span> <span class="p">(</span><span class="nx">YAHOO</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">ie</span><span class="p">){</span> <span class="c">// refer to inputEx-95</span>
            <span class="kd">var</span> <span class="nx">field</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">;</span>
            <span class="k">new</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">KeyListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">,</span> <span class="p">{</span><span class="nx">keys</span><span class="o">:</span><span class="p">[</span><span class="mi">13</span><span class="p">]}</span><span class="o">,</span> <span class="p">{</span><span class="nx">fn</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                <span class="nx">field</span><span class="p">.</span><span class="nx">blur</span><span class="p">();</span>
                <span class="nx">field</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
            <span class="p">}}).</span><span class="nx">enable</span><span class="p">();</span>
       <span class="p">}</span>

	   <span class="nx">Event</span><span class="p">.</span><span class="nx">addFocusListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onFocus</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
		<span class="nx">Event</span><span class="p">.</span><span class="nx">addBlurListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onBlur</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
	   <span class="nx">Event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">,</span> <span class="s2">&quot;keypress&quot;</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onKeyPress</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
	   <span class="nx">Event</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="o">,</span> <span class="s2">&quot;keyup&quot;</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onKeyUp</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Return the string value</span>
<span class="c">    * @param {String} The string value</span>
<span class="c">    */</span>
   <span class="nx">getValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      
      <span class="kd">var</span> <span class="nx">value</span><span class="o">;</span>
      
      <span class="nx">value</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">value</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">value</span><span class="o">;</span>
      
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">trim</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">value</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
      <span class="p">}</span>
      
	   <span class="k">return</span> <span class="nx">value</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Function to set the value</span>
<span class="c">    * @param {String} value The new value</span>
<span class="c">    * @param {boolean} [sendUpdatedEvt] (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)</span>
<span class="c">    */</span>
   <span class="nx">setValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="o">,</span> <span class="nx">sendUpdatedEvt</span><span class="p">)</span> <span class="p">{</span>
		<span class="c">// + check : if Null or Undefined we put &#39;&#39; in the stringField</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isNull</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="nx">value</span><span class="o">;</span>

      <span class="c">// call parent class method to set style and fire updatedEvt</span>
      <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">setValue</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">value</span><span class="o">,</span> <span class="nx">sendUpdatedEvt</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Uses the optional regexp to validate the field value</span>
<span class="c">    */</span>
   <span class="nx">validate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span>

      <span class="c">// empty field</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
         <span class="c">// validate only if not required</span>
         <span class="k">return</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span><span class="o">;</span>
      <span class="p">}</span>

      <span class="c">// Check regex matching and minLength (both used in password field...)</span>
      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

      <span class="c">// if we are using a regular expression</span>
      <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">regexp</span> <span class="p">)</span> <span class="p">{</span>
	      <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="nx">val</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">regexp</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">minLength</span> <span class="p">)</span> <span class="p">{</span>
	      <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="nx">val</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">minLength</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Disable the field</span>
<span class="c">    */</span>
   <span class="nx">disable</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Enable the field</span>
<span class="c">    */</span>
   <span class="nx">enable</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Set the focus to this field</span>
<span class="c">    */</span>
   <span class="nx">focus</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c">// Can&#39;t use lang.isFunction because IE &gt;= 6 would say focus is not a function (IE says it&#39;s an object) !!</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!!</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">lang</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">focus</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
      <span class="p">}</span>
   <span class="p">}</span><span class="o">,</span>

	<span class="c">/**</span>
<span class="c">    * Add the minLength string message handling</span>
<span class="c">    */</span>
	<span class="nx">getStateString</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
	   <span class="k">if</span><span class="p">(</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">stateInvalid</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">minLength</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">minLength</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">return</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">stringTooShort</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">minLength</span><span class="o">+</span><span class="nx">inputEx</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">stringTooShort</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
      <span class="p">}</span>
	   <span class="k">return</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">getStateString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">state</span><span class="p">);</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="c">/**</span>
<span class="c">    * Display the type invite after setting the class</span>
<span class="c">    */</span>
   <span class="nx">setClassFromState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	   <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">setClassFromState</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

	   <span class="c">// display/mask typeInvite</span>
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">updateTypeInvite</span><span class="p">();</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>

	<span class="nx">updateTypeInvite</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

	   <span class="c">// field not focused</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span> <span class="s2">&quot;inputEx-focused&quot;</span><span class="p">))</span> <span class="p">{</span>

         <span class="c">// show type invite if field is empty</span>
         <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">())</span> <span class="p">{</span>
	         <span class="nx">Dom</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span> <span class="s2">&quot;inputEx-typeInvite&quot;</span><span class="p">);</span>
	         <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span><span class="o">;</span>

	      <span class="c">// important for setValue to work with typeInvite</span>
         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">Dom</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span> <span class="s2">&quot;inputEx-typeInvite&quot;</span><span class="p">);</span>
         <span class="p">}</span>

      <span class="c">// field focused : remove type invite</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	      <span class="k">if</span><span class="p">(</span><span class="nx">Dom</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span><span class="s2">&quot;inputEx-typeInvite&quot;</span><span class="p">))</span> <span class="p">{</span>
	         <span class="c">// remove text</span>
	         <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>

	         <span class="c">// remove the &quot;empty&quot; state and class</span>
	         <span class="k">this</span><span class="p">.</span><span class="nx">previousState</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	         <span class="nx">Dom</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="o">,</span><span class="s2">&quot;inputEx-typeInvite&quot;</span><span class="p">);</span>
         <span class="p">}</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>

	<span class="c">/**</span>
<span class="c">	 * Clear the typeInvite when the field gains focus</span>
<span class="c">	 */</span>
	<span class="nx">onFocus</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	   <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">onFocus</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span><span class="nx">e</span><span class="p">);</span>

	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">typeInvite</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">updateTypeInvite</span><span class="p">();</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>

	<span class="nx">onKeyPress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	   <span class="c">// override me</span>
	<span class="p">}</span><span class="o">,</span>

   <span class="nx">onKeyUp</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="c">// override me</span>
      <span class="c">//</span>
      <span class="c">//   example :</span>
      <span class="c">//</span>
      <span class="c">//   lang.later(0, this, this.setClassFromState);</span>
      <span class="c">//</span>
      <span class="c">//     -&gt; Set style immediatly when typing in the field</span>
      <span class="c">//     -&gt; Call setClassFromState escaping the stack (after the event has been fully treated, because the value has to be updated)</span>
   <span class="p">}</span>

<span class="p">});</span>


<span class="nx">inputEx</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">stringTooShort</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;This field should contain at least &quot;</span><span class="o">,</span><span class="s2">&quot; numbers or characters&quot;</span><span class="p">];</span>

<span class="c">// Register this class as &quot;string&quot; type</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">registerType</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">,</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">StringField</span><span class="o">,</span> <span class="p">[</span>
    <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;string&#39;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s1">&#39;Type invite&#39;</span><span class="o">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;typeInvite&#39;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;integer&#39;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s1">&#39;Size&#39;</span><span class="o">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;size&#39;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">20</span><span class="p">}</span><span class="o">,</span>
    <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;integer&#39;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s1">&#39;Min. length&#39;</span><span class="o">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;minLength&#39;</span><span class="o">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="p">]);</span>

<span class="p">})();</span>
</pre></div>
