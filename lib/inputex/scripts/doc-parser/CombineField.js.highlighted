<div class="highlight"><pre><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	
   <span class="kd">var</span> <span class="nx">lang</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">lang</span><span class="o">,</span> <span class="nx">Dom</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">Dom</span><span class="o">;</span>
	
<span class="c">/**</span>
<span class="c"> * A meta field to put N fields on the same line, separated by separators</span>
<span class="c"> * @class inputEx.CombineField</span>
<span class="c"> * @extends inputEx.Group</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param {Object} options Added options:</span>
<span class="c"> * &lt;ul&gt;</span>
<span class="c"> *    &lt;li&gt;separators: array of string inserted&lt;/li&gt;</span>
<span class="c"> * &lt;/ul&gt;</span>
<span class="c"> */</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">CombineField</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">inputEx</span><span class="p">.</span><span class="nx">CombineField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">options</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">lang</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">CombineField</span><span class="o">,</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">Group</span><span class="o">,</span> <span class="p">{</span>
   <span class="c">/**</span>
<span class="c">    * Set the default values of the options</span>
<span class="c">    * @param {Object} options Options object as passed to the constructor</span>
<span class="c">    */</span>
   <span class="nx">setOptions</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">inputEx</span><span class="p">.</span><span class="nx">CombineField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">options</span><span class="p">);</span>

      <span class="c">// Overwrite options</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">className</span> <span class="o">?</span> <span class="nx">options</span><span class="p">.</span><span class="nx">className</span> <span class="o">:</span> <span class="s1">&#39;inputEx-CombineField&#39;</span><span class="o">;</span>
      
      <span class="c">// Added options</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">separators</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">separators</span><span class="o">;</span>
   <span class="p">}</span><span class="o">,</span>
	   
	
	<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

      <span class="c">// Create the div wrapper for this group</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">className</span><span class="p">});</span>
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
   	   <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">id</span><span class="o">;</span>
   	<span class="p">}</span>

	   <span class="c">// Label element</span>
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="kd">label</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelDiv</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;-label&#39;</span><span class="o">,</span> <span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-label&#39;</span><span class="o">,</span> <span class="s1">&#39;for&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;-field&#39;</span><span class="p">});</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelEl</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">);</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="kd">label</span><span class="p">)</span> <span class="p">);</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">labelDiv</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">labelEl</span><span class="p">);</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">labelDiv</span><span class="p">);</span>
      <span class="p">}</span>
	
  	   <span class="k">this</span><span class="p">.</span><span class="nx">renderFields</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">);</span>  	  

  	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">disabled</span><span class="p">)</span> <span class="p">{</span>
  	      <span class="k">this</span><span class="p">.</span><span class="nx">disable</span><span class="p">();</span>
  	   <span class="p">}</span>
		
	   <span class="c">// Insert a float breaker</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s2">&quot;inputEx-clear-div&quot;</span><span class="p">}</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="p">);</span>
	<span class="p">}</span><span class="o">,</span>
	   
	<span class="c">/**</span>
<span class="c">	 * Render the subfields</span>
<span class="c">	 */</span>
	<span class="nx">renderFields</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">parentEl</span><span class="p">)</span> <span class="p">{</span>
	    
	   <span class="k">this</span><span class="p">.</span><span class="nx">appendSeparator</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	   
	   <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">fields</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span><span class="o">;</span><span class="p">}</span>
	   
	   <span class="kd">var</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">field</span><span class="o">,</span> <span class="nx">fieldEl</span><span class="o">,</span><span class="nx">t</span><span class="o">;</span>
	   
	   <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	      <span class="nx">f</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
	      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span> <span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span><span class="p">}</span>
	      <span class="nx">field</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderField</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
	      <span class="nx">fieldEl</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">getEl</span><span class="p">();</span>
	      <span class="nx">t</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">;</span>
	      <span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="o">!=</span> <span class="s2">&quot;group&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">t</span> <span class="o">!=</span> <span class="s2">&quot;form&quot;</span><span class="p">)</span> <span class="p">{</span>
	         <span class="c">// remove the line breaker (&lt;div style=&#39;clear: both;&#39;&gt;)</span>
	         <span class="nx">field</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">fieldEl</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">fieldEl</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
         <span class="p">}</span>
      	<span class="c">// make the field float left</span>
      	<span class="nx">Dom</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">fieldEl</span><span class="o">,</span> <span class="s1">&#39;float&#39;</span><span class="o">,</span> <span class="s1">&#39;left&#39;</span><span class="p">);</span>
   	
      	<span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">fieldEl</span><span class="p">);</span>
      	
      	<span class="k">this</span><span class="p">.</span><span class="nx">appendSeparator</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
	   <span class="p">}</span>
	      
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">    * Override to force required option on each subfield</span>
<span class="c">    * @param {Object} fieldOptions The field properties as required by inputEx()</span>
<span class="c">    */</span>
   <span class="nx">renderField</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldOptions</span><span class="p">)</span> <span class="p">{</span>
      
      <span class="c">// Subfields should inherit required property</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">fieldOptions</span><span class="p">.</span><span class="nx">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
      <span class="p">}</span>
      
      <span class="k">return</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">CombineField</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">renderField</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">fieldOptions</span><span class="p">);</span>
   <span class="p">}</span><span class="o">,</span>
	
	<span class="nx">appendSeparator</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
	   <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">separators</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">separators</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
	      <span class="kd">var</span> <span class="nx">sep</span> <span class="o">=</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">cn</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="o">,</span> <span class="p">{</span><span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;inputEx-CombineField-separator&#39;</span><span class="p">}</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">separators</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">divEl</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">sep</span><span class="p">);</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>
	

	   
	<span class="c">/**</span>
<span class="c">	 * Set the value</span>
<span class="c">	 * @param {Array} values [value1, value2, ...]</span>
<span class="c">	 * @param {boolean} [sendUpdatedEvt] (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)</span>
<span class="c">	 */</span>
	<span class="nx">setValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="o">,</span> <span class="nx">sendUpdatedEvt</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="kd">var</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">inputs</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
	   <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span> <span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	      <span class="k">this</span><span class="p">.</span><span class="nx">inputs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">,</span> <span class="kc">false</span><span class="p">);</span>
      <span class="p">}</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">runFieldsInteractions</span><span class="p">();</span>
      
	   <span class="k">if</span><span class="p">(</span><span class="nx">sendUpdatedEvt</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
	      <span class="c">// fire update event</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">fireUpdatedEvt</span><span class="p">();</span>
      <span class="p">}</span>
	<span class="p">}</span><span class="o">,</span>
	
	<span class="c">/**</span>
<span class="c">	 * Specific getValue </span>
<span class="c">	 * @return {Array} An array of values [value1, value2, ...]</span>
<span class="c">	 */</span>
	<span class="nx">getValue</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	   <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">inputs</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
	   <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	      <span class="nx">values</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">inputs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">getValue</span><span class="p">());</span>
	   <span class="p">}</span>
	   <span class="k">return</span> <span class="nx">values</span><span class="o">;</span>
	<span class="p">}</span>
	
<span class="p">});</span>
	
<span class="c">// Register this class as &quot;combine&quot; type</span>
<span class="nx">inputEx</span><span class="p">.</span><span class="nx">registerType</span><span class="p">(</span><span class="s2">&quot;combine&quot;</span><span class="o">,</span> <span class="nx">inputEx</span><span class="p">.</span><span class="nx">CombineField</span><span class="o">,</span> <span class="p">[</span>
   <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;list&#39;</span><span class="o">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;fields&#39;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s1">&#39;Elements&#39;</span><span class="o">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="o">,</span> <span class="nx">elementType</span><span class="o">:</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;type&#39;</span><span class="p">}</span> <span class="p">}</span><span class="o">,</span>
   <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;list&#39;</span><span class="o">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;separators&#39;</span><span class="o">,</span> <span class="kd">label</span><span class="o">:</span> <span class="s1">&#39;Separators&#39;</span><span class="o">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
<span class="p">]);</span>
	
<span class="p">})();</span>
</pre></div>
